<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ben</title>
  
  <subtitle>个人学习笔记</subtitle>
  <link href="https://bentech8.github.io/atom.xml" rel="self"/>
  
  <link href="https://bentech8.github.io/"/>
  <updated>2025-03-16T09:29:09.205Z</updated>
  <id>https://bentech8.github.io/</id>
  
  <author>
    <name>Ben</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>装饰器</title>
    <link href="https://bentech8.github.io/2025/03/16/python-%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://bentech8.github.io/2025/03/16/python-%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2025-03-16T09:24:16.000Z</published>
    <updated>2025-03-16T09:29:09.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>  装饰器本质上就是一个python函数，可以让其他函数在不需要做任何代码变动的前提下，增加额外的功能。装饰器的返回值也是一个函数对象。</p><h2 id="装饰器种类"><a href="#装饰器种类" class="headerlink" title="装饰器种类"></a>装饰器种类</h2><h3 id="不带参数的装饰器"><a href="#不带参数的装饰器" class="headerlink" title="不带参数的装饰器"></a>不带参数的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        start = time.time()</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(time.time() - start)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timer          </span><span class="comment"># ===&gt; func1 = timer(func1）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func1()</span><br></pre></td></tr></table></figure><h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(time.time() - start)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timer        </span><span class="comment"># ===&gt; func1 = timer(func1)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func1(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="带返回值的装饰器"><a href="#带返回值的装饰器" class="headerlink" title="带返回值的装饰器"></a>带返回值的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(time.time() - start)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timer        </span><span class="comment"># ===&gt; func1 = timer(func1)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timer        </span><span class="comment"># ===&gt; func2 = timer(func2)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func2 and get a:%s&quot;</span> % (a))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;func2 over&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func1(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(func2(<span class="string">&quot;aaaa&quot;</span>))</span><br></pre></td></tr></table></figure><p>  当查看函数信息的方法时，在此处失效：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(time.time() - start)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个主页信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;from index&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(index.__doc__)</span><br><span class="line"><span class="built_in">print</span>(index.__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line">inner</span><br></pre></td></tr></table></figure><p>  解决方案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(time.time() - start)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个主页信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;from index&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(index.__doc__)</span><br><span class="line"><span class="built_in">print</span>(index.__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">这是一个主页信息</span><br><span class="line">index</span><br></pre></td></tr></table></figure><h2 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h2><p>  装饰器完美的遵循了 开放封闭原则</p><h3 id="对扩展开放"><a href="#对扩展开放" class="headerlink" title="对扩展开放"></a>对扩展开放</h3><p>  任何一个程序，不可能在设计之初就已经想好了所有的功能并且未来不做任何更新和修改。所以必须允许代码扩展、添加新功能。</p><h3 id="对修改封闭"><a href="#对修改封闭" class="headerlink" title="对修改封闭"></a>对修改封闭</h3><p>  我们写的一个函数，很有可能已经交付给其他人使用了，如果这个时候对其进行修改，很有可能影响其他已经在使用该函数的用户。</p><h2 id="装饰器的固定结构"><a href="#装饰器的固定结构" class="headerlink" title="装饰器的固定结构"></a>装饰器的固定结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行函数之前要做的&quot;&quot;&quot;</span></span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行函数之后要做的&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行函数之前要做的&quot;&quot;&quot;</span></span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行函数之后要做的&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><h2 id="装饰器带参数"><a href="#装饰器带参数" class="headerlink" title="装饰器带参数"></a>装饰器带参数</h2><p>  应用场景：如果有成千上万个函数使用了一个装饰器，现在想把这些装饰器取消掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">flag</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;执行函数之前要做的&quot;</span>)</span><br><span class="line">            ret = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;执行函数之后要做的&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> timer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@outer(<span class="params"><span class="literal">False</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><h2 id="多个装饰器装饰一个函数"><a href="#多个装饰器装饰一个函数" class="headerlink" title="多个装饰器装饰一个函数"></a>多个装饰器装饰一个函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper1</span>(<span class="params">func</span>):   <span class="comment"># func = f</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner1</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;wrapper1, before func&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;wrapper1, after func&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper2</span>(<span class="params">func</span>):  <span class="comment"># func = inner1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner2</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;wrapper2, before func&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;wrapper2, after func&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@wrapper2    </span><span class="comment"># f = wrapper2(f) ===&gt; f = inner2</span></span><br><span class="line"><span class="meta">@wrapper1    </span><span class="comment"># 先装饰wrapper1 ---&gt; f = wrapper1(f) ===&gt; f = inner1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in f&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f()   <span class="comment"># ===&gt; inner2()</span></span><br></pre></td></tr></table></figure><p>  规律：</p><p>  对于n个装饰器装饰同一个函数，例如靠近函数名f的为@outer_1，最上层为@outer_n，那么执行f()时，执行顺序为：</p><ul><li>第n个装饰器执行f()前要做的 —&gt; 第n-1个装饰器执行f()前要做的 —&gt; …—&gt;第1个装饰器执行f()前要做的 —&gt;</li><li>f() —&gt;</li><li>第1个装饰器执行f()要做的 —&gt; 第二个装饰器执行f()后要做的 —&gt;…—&gt;第n个装饰器执行f()后要做的</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;  装饰器本质上就是一个python函数，可以让其他函数在不需要做任何代码变动的前提下，增加额外的功能。装饰器的返回值也是一个函数对象。&lt;/p&gt;
&lt;h2 id=&quot;装饰器种类&quot;&gt;&lt;a href=&quot;#装饰器种类&quot; class=&quot;headerlink&quot; title=&quot;装饰器种类&quot;&gt;&lt;/a&gt;装饰器种类&lt;/h2&gt;&lt;h3 id=&quot;不带参数的装饰器&quot;&gt;&lt;a href=&quot;#不带参数的装饰器&quot; class=&quot;headerlink&quot; title=&quot;不带参数的装饰器&quot;&gt;&lt;/a&gt;不带参数的装饰器&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;timer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;func&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;inner&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        start = time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time.sleep(&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        func()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(time.time() - start)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inner&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@timer          &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;# ===&amp;gt; func1 = timer(func1）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;func1&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;in func1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func1()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>递归函数</title>
    <link href="https://bentech8.github.io/2025/03/16/python-%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/"/>
    <id>https://bentech8.github.io/2025/03/16/python-%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</id>
    <published>2025-03-16T09:20:24.000Z</published>
    <updated>2025-03-16T09:22:46.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>在函数中调用函数本身，就是递归</li><li>在python中递归的深度最大为1000，但实际达不到1000</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    print(&quot;-----func-----&quot;)</span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>可以使用递归来遍历各种树形结构，比如文件夹系统：可以使用递归来遍历该文件夹中的所有文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def func(filepath, n):</span><br><span class="line">    files_list = os.listdir(filepath)  # 获取当前文件夹中的所有文件</span><br><span class="line">    for file in files_list:</span><br><span class="line">        file_d = os.path.join(filepath, file)  # 拼接文件的真实路径</span><br><span class="line">        if os.path.isdir(file_d):  # 递归入口  判断文件是否为文件夹</span><br><span class="line">            print(&quot;\t&quot;*n, file)</span><br><span class="line">            func(file_d, n+1)  #</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;\t&quot;*n, file)  # 递归出口</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><ul><li>优点：每次能够除掉一半的数据，查找效率高</li><li>要求：查找的序列必须是有序序列</li></ul><h3 id="非递归算法"><a href="#非递归算法" class="headerlink" title="非递归算法"></a>非递归算法</h3><h4 id="利用索引"><a href="#利用索引" class="headerlink" title="利用索引"></a>利用索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让用户输入一个数n. 判断这个n是否出现在lst中</span></span><br><span class="line">lst = [<span class="number">4</span>, <span class="number">56</span>, <span class="number">178</span>, <span class="number">253</span>, <span class="number">625</span>, <span class="number">1475</span>, <span class="number">2580</span>, <span class="number">3574</span>, <span class="number">15963</span>]</span><br><span class="line"></span><br><span class="line">left = <span class="number">0</span></span><br><span class="line">right = <span class="built_in">len</span>(lst) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数n：&quot;</span>))</span><br><span class="line"><span class="keyword">while</span> left &lt;= right:</span><br><span class="line">    mid = (left + right) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> lst[mid] &gt; num:</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> lst[mid] &lt; num:</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这个数在lst中&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这个数不在lst中&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h3><h4 id="利用索引-1"><a href="#利用索引-1" class="headerlink" title="利用索引"></a>利用索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让用户输入一个数n. 判断这个n是否出现在lst中</span></span><br><span class="line">lst = [<span class="number">4</span>, <span class="number">56</span>, <span class="number">178</span>, <span class="number">253</span>, <span class="number">625</span>, <span class="number">1475</span>, <span class="number">2580</span>, <span class="number">3574</span>, <span class="number">15963</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">lst, num, left, right</span>):</span><br><span class="line">    <span class="keyword">if</span> left &gt; right:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    mid = (left + right) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> lst[mid] &gt; num:</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> binary_search(lst, num, left, right)</span><br><span class="line">    <span class="keyword">elif</span> lst[mid] &lt; num:</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> binary_search(lst, num, left, right)</span><br><span class="line">    <span class="keyword">else</span>:<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数n：&quot;</span>))</span><br><span class="line">ret = binary_search(lst, num, <span class="number">0</span>, <span class="built_in">len</span>(lst)-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure><h4 id="切换列表"><a href="#切换列表" class="headerlink" title="切换列表"></a>切换列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让用户输入一个数n. 判断这个n是否出现在lst中</span></span><br><span class="line">lst = [<span class="number">4</span>, <span class="number">56</span>, <span class="number">178</span>, <span class="number">253</span>, <span class="number">625</span>, <span class="number">1475</span>, <span class="number">2580</span>, <span class="number">3574</span>, <span class="number">15963</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">lst, num</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lst) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    mid = (<span class="built_in">len</span>(lst) - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; lst[mid]:</span><br><span class="line">        <span class="keyword">return</span> binary_search(lst[mid+<span class="number">1</span>:], num)</span><br><span class="line">    <span class="keyword">elif</span> num &lt; lst[mid]:</span><br><span class="line">        <span class="keyword">return</span> binary_search(lst[:mid], num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这个数在lst中&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数n：&quot;</span>))</span><br><span class="line"></span><br><span class="line">ret = binary_search(lst, num)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;递归函数&quot;&gt;&lt;a href=&quot;#递归函数&quot; class=&quot;headerlink&quot; title=&quot;递归函数&quot;&gt;&lt;/a&gt;递归函数&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在函数中调用函数本身，就是递归&lt;/li&gt;
&lt;li&gt;在python中递归的深度最大为1000，但实际达不到1000&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def func():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;-----func-----&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;headerlink&quot; title=&quot;应用&quot;&gt;&lt;/a&gt;应用&lt;/h3&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>生成器</title>
    <link href="https://bentech8.github.io/2025/03/16/python-%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>https://bentech8.github.io/2025/03/16/python-%E7%94%9F%E6%88%90%E5%99%A8/</id>
    <published>2025-03-16T09:15:20.000Z</published>
    <updated>2025-03-16T09:19:15.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>生成器本质就是迭代器</li><li>生成器对象可以直接进行for循环</li></ul><h3 id="生成器特点"><a href="#生成器特点" class="headerlink" title="生成器特点"></a>生成器特点</h3><ul><li>省内存</li><li>惰性机制</li><li>只能向前，不能反复</li></ul><h3 id="生成器获取方式"><a href="#生成器获取方式" class="headerlink" title="生成器获取方式"></a>生成器获取方式</h3><ul><li>通过生成器函数</li><li>通过生成器表达式</li></ul><h2 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h2><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><ul><li>可以把函数分段运行</li><li>作用和return一样，也是返回数据</li></ul><h3 id="普通函数与生成器函数区别"><a href="#普通函数与生成器函数区别" class="headerlink" title="普通函数与生成器函数区别"></a>普通函数与生成器函数区别</h3><p>普通函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    print(&quot;111&quot;)</span><br><span class="line">    return 222</span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">111</span><br><span class="line">222</span><br></pre></td></tr></table></figure><p>生成器函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    print(&quot;111&quot;)</span><br><span class="line">    yield 222</span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">&lt;generator object func at 0x0000018007451C50&gt;</span><br></pre></td></tr></table></figure><p>所以：</p><ul><li>当函数中存在yield，那么这个函数就是一个生成器函数</li><li>当执行生成器函数时，实则为获取这个生成器</li></ul><h3 id="获取生成器"><a href="#获取生成器" class="headerlink" title="获取生成器"></a>获取生成器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    print(&quot;111&quot;)</span><br><span class="line">    yield 222</span><br><span class="line"></span><br><span class="line">ret = func()  # 获取到生成器</span><br></pre></td></tr></table></figure><h3 id="执行生成器"><a href="#执行生成器" class="headerlink" title="执行生成器"></a>执行生成器</h3><ul><li>通过__next__()</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    print(&quot;111&quot;)</span><br><span class="line">    yield 222</span><br><span class="line"></span><br><span class="line">gener = func()</span><br><span class="line">ret = gener.__next__()  # 打印 111，222返回给ret</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><p>当程序运行完最后一个yield，那么后面继续执行__next__()，程序会报错，但后面内容还会执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    print(&quot;111&quot;)</span><br><span class="line">    yield 222</span><br><span class="line">    print(&quot;333&quot;)</span><br><span class="line">    yield 444</span><br><span class="line">    print(&quot;555&quot;)</span><br><span class="line"></span><br><span class="line">gener = func()</span><br><span class="line">print(gener.__next__())  # 111 222</span><br><span class="line">print(gener.__next__())  # 333 444</span><br><span class="line">print(gener.__next__())  # 555 StopIteration</span><br></pre></td></tr></table></figure><ul><li><p>通过send()</p><p>send()和__next__()一样都可以让生成器执行到下一个yield，但send()可以给上一个yield的位置变量传递值。当执行完最后一个yield，再继续执行send()时，程序报错，但还可给最后一个yield位置变量传递值。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    print(&quot;111&quot;)</span><br><span class="line">    a = yield 222</span><br><span class="line">    print(&quot;a = &quot;, a)</span><br><span class="line">    print(&quot;333&quot;)</span><br><span class="line">    b = yield 444</span><br><span class="line">    print(&quot;b = &quot;, b)</span><br><span class="line"></span><br><span class="line">gener = func()</span><br><span class="line">gener.__next__()  # 111</span><br><span class="line">print(gener.send(&quot;1&quot;))  # a = 1 333 444</span><br><span class="line">print(gener.send(&quot;2&quot;))  # b = 2  StopIteration</span><br></pre></td></tr></table></figure><p> send和__next__()区别：</p><ul><li>send和__next__()都是让生成器向下走一次</li><li>send可以给上一个yield的位置传递值，不能给最后一个yield发送值。在第一次执行生成器代码的时候不能使用send()</li></ul><h3 id="利用for循环获取生成器内部元素"><a href="#利用for循环获取生成器内部元素" class="headerlink" title="利用for循环获取生成器内部元素"></a>利用for循环获取生成器内部元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    yield 111</span><br><span class="line">    yield 222</span><br><span class="line">    yield 333</span><br><span class="line">    yield 444</span><br><span class="line"></span><br><span class="line">gen = func()</span><br><span class="line">for i in gen:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">111</span><br><span class="line">222</span><br><span class="line">333</span><br><span class="line">444</span><br></pre></td></tr></table></figure><h3 id="yield-from"><a href="#yield-from" class="headerlink" title="yield from"></a>yield from</h3><p>  可以直接把可迭代对象中的每一个数据作为生成器的结果进行返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def gen():</span><br><span class="line">    lst = [11, 22, 33, 44, 55, 66]</span><br><span class="line">    yield from lst</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = gen()</span><br><span class="line">for i in ret:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">33</span><br><span class="line">44</span><br><span class="line">55</span><br><span class="line">66</span><br></pre></td></tr></table></figure><p>此时，上述代码相当于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def gen():</span><br><span class="line">    lst = [11, 22, 33, 44, 55, 66]</span><br><span class="line">    yield lst[0]</span><br><span class="line">    yield lst[1]</span><br><span class="line">    yield lst[2]</span><br><span class="line">    yield lst[3]</span><br><span class="line">    yield lst[4]</span><br><span class="line">    yield lst[5]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = gen()</span><br><span class="line">for i in ret:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h2 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h2><h3 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h3><ul><li>（结果 for 变量 in 可迭代对象 if 条件筛选）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gen = (i for i in range(10))</span><br><span class="line">print(gen)  # &lt;generator object &lt;genexpr&gt; at 0x000002CE52D91C50&gt;</span><br></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>本质是迭代器</li><li>省内存</li><li>惰性机制</li><li>只能向前，不能反复</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>1）list ()可把传递进来的数据转化成列表，list里面包含for循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = (i for i in range(10))</span><br><span class="line"></span><br><span class="line">print(list(g))  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure><ol start="2"><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    print(111)</span><br><span class="line">    yield 222</span><br><span class="line"></span><br><span class="line">g = func()</span><br><span class="line">g1 = (i for i in g)</span><br><span class="line">g2 = (i for i in g1)</span><br><span class="line"></span><br><span class="line">print(list(g)) # 111 [222]</span><br><span class="line">print(list(g1)) # []</span><br><span class="line">print(list(g2)) # []</span><br></pre></td></tr></table></figure><p> 3）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def add(a, b):</span><br><span class="line">    return a + b</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    for r_i in range(4):</span><br><span class="line">        yield r_i</span><br><span class="line"></span><br><span class="line">g = test()</span><br><span class="line"></span><br><span class="line">for n in [2, 10]:</span><br><span class="line">    g = (add(n, i) for i in g)</span><br><span class="line"></span><br><span class="line">print(list(g))  # 20 21 22 23</span><br></pre></td></tr></table></figure><p>此代码相当于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def add(a, b):</span><br><span class="line">    return a + b</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    for r_i in range(4):</span><br><span class="line">        yield r_i</span><br><span class="line"></span><br><span class="line">g1 = test()</span><br><span class="line"></span><br><span class="line">n = 2</span><br><span class="line">g2 = (add(n, i) for i in g1)</span><br><span class="line"></span><br><span class="line">n = 10</span><br><span class="line">g3 = (add(n, i) for i in g2)</span><br><span class="line"></span><br><span class="line">print(list(g3)) # n = 10, g3 = (add(n, i) for i in (add(n, i) for i in g1))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;生成器本质就是迭代器&lt;/li&gt;
&lt;li&gt;生成器对象可以直接进行for循环&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;生成器特点&quot;&gt;&lt;a href=&quot;#生成器特点&quot; class=&quot;headerlink&quot; title=&quot;生成器特点&quot;&gt;&lt;/a&gt;生成器特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;省内存&lt;/li&gt;
&lt;li&gt;惰性机制&lt;/li&gt;
&lt;li&gt;只能向前，不能反复&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;生成器获取方式&quot;&gt;&lt;a href=&quot;#生成器获取方式&quot; class=&quot;headerlink&quot; title=&quot;生成器获取方式&quot;&gt;&lt;/a&gt;生成器获取方式&lt;/h3&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>迭代器</title>
    <link href="https://bentech8.github.io/2025/03/16/python-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>https://bentech8.github.io/2025/03/16/python-%E8%BF%AD%E4%BB%A3%E5%99%A8/</id>
    <published>2025-03-16T09:12:03.000Z</published>
    <updated>2025-03-16T09:15:03.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><ul><li>Iterable：可迭代对象，内部包含__iter__()函数</li><li>Iterator：迭代器，内部包含__iter__()和__next__()函数</li></ul><p>特点：</p><ul><li>节省内存</li><li>惰性机制</li><li>不能反复，只能向下执行</li></ul><h3 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h3><h4 id="判断一个对象是否为可迭代对象"><a href="#判断一个对象是否为可迭代对象" class="headerlink" title="判断一个对象是否为可迭代对象"></a>判断一个对象是否为可迭代对象</h4><ul><li>通过dir函数来查看类中定义的方法中是否有__iter__方法</li></ul><p>如果__iter__能找到，那么这个类的对象就是一个可迭代对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(<span class="built_in">str</span>))<span class="built_in">print</span>(<span class="built_in">dir</span>(<span class="built_in">list</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__contains__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getitem__&#x27;</span>, <span class="string">&#x27;__getnewargs__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__len__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__mod__&#x27;</span>, <span class="string">&#x27;__mul__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__rmod__&#x27;</span>, <span class="string">&#x27;__rmul__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;capitalize&#x27;</span>, <span class="string">&#x27;casefold&#x27;</span>, <span class="string">&#x27;center&#x27;</span>, <span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;encode&#x27;</span>, <span class="string">&#x27;endswith&#x27;</span>, <span class="string">&#x27;expandtabs&#x27;</span>, <span class="string">&#x27;find&#x27;</span>, <span class="string">&#x27;format&#x27;</span>, <span class="string">&#x27;format_map&#x27;</span>, <span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;isalnum&#x27;</span>, <span class="string">&#x27;isalpha&#x27;</span>, <span class="string">&#x27;isdecimal&#x27;</span>, <span class="string">&#x27;isdigit&#x27;</span>, <span class="string">&#x27;isidentifier&#x27;</span>, <span class="string">&#x27;islower&#x27;</span>, <span class="string">&#x27;isnumeric&#x27;</span>, <span class="string">&#x27;isprintable&#x27;</span>, <span class="string">&#x27;isspace&#x27;</span>, <span class="string">&#x27;istitle&#x27;</span>, <span class="string">&#x27;isupper&#x27;</span>, <span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;ljust&#x27;</span>, <span class="string">&#x27;lower&#x27;</span>, <span class="string">&#x27;lstrip&#x27;</span>, <span class="string">&#x27;maketrans&#x27;</span>, <span class="string">&#x27;partition&#x27;</span>, <span class="string">&#x27;replace&#x27;</span>, <span class="string">&#x27;rfind&#x27;</span>, <span class="string">&#x27;rindex&#x27;</span>, <span class="string">&#x27;rjust&#x27;</span>, <span class="string">&#x27;rpartition&#x27;</span>, <span class="string">&#x27;rsplit&#x27;</span>, <span class="string">&#x27;rstrip&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;splitlines&#x27;</span>, <span class="string">&#x27;startswith&#x27;</span>, <span class="string">&#x27;strip&#x27;</span>, <span class="string">&#x27;swapcase&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;translate&#x27;</span>, <span class="string">&#x27;upper&#x27;</span>, <span class="string">&#x27;zfill&#x27;</span>][<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__contains__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__delitem__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getitem__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__iadd__&#x27;</span>, <span class="string">&#x27;__imul__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__len__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__mul__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__reversed__&#x27;</span>, <span class="string">&#x27;__rmul__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__setitem__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;append&#x27;</span>, <span class="string">&#x27;clear&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;extend&#x27;</span>, <span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;remove&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>]</span><br></pre></td></tr></table></figure><ul><li>通过isinstance()函数</li></ul><p>如果返回值为True,则该对象为可迭代对象，否则不是。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from collections import Iterable</span><br><span class="line"></span><br><span class="line">lst = [11, 22, 33]</span><br><span class="line"></span><br><span class="line">print(isinstance(lst, Iterable))  # True</span><br></pre></td></tr></table></figure><h3 id="迭代器-1"><a href="#迭代器-1" class="headerlink" title="迭代器"></a>迭代器</h3><ul><li>迭代器本身是可迭代的，所以类中有__iter__方法。</li></ul><h4 id="判断一个对象是否为迭代器"><a href="#判断一个对象是否为迭代器" class="headerlink" title="判断一个对象是否为迭代器"></a>判断一个对象是否为迭代器</h4><ul><li>通过dir函数来查看类中定义的方法中是否有__next__方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33]</span><br><span class="line">ret = lst.__iter__()</span><br><span class="line"></span><br><span class="line">print(&quot;__next__&quot; in dir(ret))  # True</span><br></pre></td></tr></table></figure><ul><li>通过isinstance()函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from collections import Iterator</span><br><span class="line"></span><br><span class="line">lst = [11, 22, 33]</span><br><span class="line">ret = lst.__iter__()</span><br><span class="line"></span><br><span class="line">print(isinstance(ret, Iterator))  # True</span><br></pre></td></tr></table></figure><h4 id="迭代器取值"><a href="#迭代器取值" class="headerlink" title="迭代器取值"></a>迭代器取值</h4><p>  通过__next__获取迭代器数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33]</span><br><span class="line">ret = lst.__iter__()</span><br><span class="line"></span><br><span class="line">print(ret.__next__())</span><br><span class="line">print(ret.__next__())</span><br><span class="line">print(ret.__next__())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">33</span><br></pre></td></tr></table></figure><p>  如果获取元素个数超过迭代器元素的长度，则报错StopIteration</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33]</span><br><span class="line">ret = lst.__iter__()</span><br><span class="line"></span><br><span class="line">print(ret.__next__())</span><br><span class="line">print(ret.__next__())</span><br><span class="line">print(ret.__next__())</span><br><span class="line">print(ret.__next__())  # StopIteration</span><br></pre></td></tr></table></figure><h4 id="for循环内部代码"><a href="#for循环内部代码" class="headerlink" title="for循环内部代码"></a>for循环内部代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ret = lst.__iter__()</span><br><span class="line"></span><br><span class="line">while 1:</span><br><span class="line">    try:</span><br><span class="line">        el = ret.__next__()</span><br><span class="line">        print(el)</span><br><span class="line">    except StopIteration:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h3 id="可迭代对象-—–-迭代器"><a href="#可迭代对象-—–-迭代器" class="headerlink" title="可迭代对象 —–&gt; 迭代器"></a>可迭代对象 —–&gt; 迭代器</h3><ul><li>可迭代对象不一定是迭代器，但可通过__iter__方法转换成迭代器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33]</span><br><span class="line">ret = lst.__iter__()</span><br><span class="line"></span><br><span class="line">print(&quot;__next__&quot; in dir(ret))  # True</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;迭代器&quot;&gt;&lt;a href=&quot;#迭代器&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Iterable：可迭代对象，内部包含__iter__()函数&lt;/li&gt;
&lt;li&gt;Iterator：迭代器，内部包含__iter__()和__next__()函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节省内存&lt;/li&gt;
&lt;li&gt;惰性机制&lt;/li&gt;
&lt;li&gt;不能反复，只能向下执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;可迭代对象&quot;&gt;&lt;a href=&quot;#可迭代对象&quot; class=&quot;headerlink&quot; title=&quot;可迭代对象&quot;&gt;&lt;/a&gt;可迭代对象&lt;/h3&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>内置函数二</title>
    <link href="https://bentech8.github.io/2025/03/16/python-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E4%BA%8C/"/>
    <id>https://bentech8.github.io/2025/03/16/python-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E4%BA%8C/</id>
    <published>2025-03-16T09:03:03.000Z</published>
    <updated>2025-03-16T09:12:11.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><ul><li>表示匿名函数</li><li>为了解决一些简单的需求而设计的一句话函数</li></ul><p>语法： <strong>函数名</strong> &#x3D; <strong>lambda 参数：返回值</strong></p><ul><li>函数的参数可以有多个，多个参数之间用逗号隔开</li><li>匿名函数不管多复杂，只能写一行，且逻辑结束后直接返回数据</li><li>返回值和正常的函数一样，可以是任意数据类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = lambda n: n ** 2</span><br><span class="line">print(f(10))  # 100</span><br><span class="line">print(f.__name__)  # &lt;lambda&gt;</span><br></pre></td></tr></table></figure><p>注：匿明函数并不是说一定没有名字。上面f就是一个函数名。说他是匿明原因是通过__name__查看的时候是没有名字的。统一叫lambda。在调用时没有特别之处，像正常函数调用即可。</p><h2 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h2><ul><li>功能：排序</li></ul><p>语法：<strong>sorted(Iterable, key&#x3D;None, reverse&#x3D;False)</strong></p><ul><li>**key:**排序规则(排序函数)，在sorted内部会将可迭代对象中的每一个元素传递给这个函数的参数。根据这个函数运算的结果进行排序</li><li><strong>reverse</strong>:是否倒叙，默认值为False</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [1, 4, 6, 8, 4, 9, 10]</span><br><span class="line"></span><br><span class="line">print(sorted(lst))  # [1, 4, 4, 6, 8, 9, 10]</span><br></pre></td></tr></table></figure><p>与函数组合使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lst = [</span><br><span class="line">    &#123;&quot;name&quot;: &quot;电脑&quot;, &quot;price&quot;: 6000&#125;,</span><br><span class="line">    &#123;&quot;name&quot;: &quot;手表&quot;, &quot;price&quot;: 4000&#125;,</span><br><span class="line">    &#123;&quot;name&quot;: &quot;耳机&quot;, &quot;price&quot;: 1000&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">def func(dic):</span><br><span class="line">    return dic[&quot;price&quot;]</span><br><span class="line"></span><br><span class="line">print(sorted(lst, key=func))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[&#123;&#x27;name&#x27;: &#x27;耳机&#x27;, &#x27;price&#x27;: 1000&#125;, </span><br><span class="line"> &#123;&#x27;name&#x27;: &#x27;手表&#x27;, &#x27;price&#x27;: 4000&#125;, </span><br><span class="line"> &#123;&#x27;name&#x27;: &#x27;电脑&#x27;, &#x27;price&#x27;: 6000&#125;]</span><br></pre></td></tr></table></figure><p>与lambda组合使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lst = [</span><br><span class="line">    &#123;&quot;name&quot;: &quot;电脑&quot;, &quot;price&quot;: 6000&#125;,</span><br><span class="line">    &#123;&quot;name&quot;: &quot;手表&quot;, &quot;price&quot;: 4000&#125;,</span><br><span class="line">    &#123;&quot;name&quot;: &quot;耳机&quot;, &quot;price&quot;: 1000&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(sorted(lst, key=lambda dic:dic[&quot;price&quot;]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[&#123;&#x27;name&#x27;: &#x27;耳机&#x27;, &#x27;price&#x27;: 1000&#125;,</span><br><span class="line"> &#123;&#x27;name&#x27;: &#x27;手表&#x27;, &#x27;price&#x27;: 4000&#125;,</span><br><span class="line"> &#123;&#x27;name&#x27;: &#x27;电脑&#x27;, &#x27;price&#x27;: 6000&#125;]</span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><ul><li>功能：筛选</li></ul><p>语法：<strong>filter(function, Iterable)</strong></p><ul><li>**function:**用来筛选的函数。在filter中会自动的把Iterable中的元素传递给function。然后根据function返回的True or False来判断是否保留此项数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> portfolio = [</span><br><span class="line">     &#123;&#x27;name&#x27;: &#x27;IBM&#x27;, &#x27;shares&#x27;: 100, &#x27;price&#x27;: 91.1&#125;,</span><br><span class="line">     &#123;&#x27;name&#x27;: &#x27;AAPL&#x27;, &#x27;shares&#x27;: 50, &#x27;price&#x27;: 543.22&#125;,</span><br><span class="line">     &#123;&#x27;name&#x27;: &#x27;FB&#x27;, &#x27;shares&#x27;: 200, &#x27;price&#x27;: 21.09&#125;,</span><br><span class="line">     &#123;&#x27;name&#x27;: &#x27;HPQ&#x27;, &#x27;shares&#x27;: 35, &#x27;price&#x27;: 31.75&#125;,</span><br><span class="line">     &#123;&#x27;name&#x27;: &#x27;YHOO&#x27;, &#x27;shares&#x27;: 45, &#x27;price&#x27;: 16.35&#125;,</span><br><span class="line">     &#123;&#x27;name&#x27;: &#x27;ACME&#x27;, &#x27;shares&#x27;: 75, &#x27;price&#x27;: 115.65&#125;</span><br><span class="line"> ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lst = list(filter(lambda dic: dic[&quot;price&quot;] &gt; 100, portfolio))</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[&#123;&#x27;name&#x27;: &#x27;AAPL&#x27;, &#x27;shares&#x27;: 50, &#x27;price&#x27;: 543.22&#125;, </span><br><span class="line">&#123;&#x27;name&#x27;: &#x27;ACME&#x27;, &#x27;shares&#x27;: 75, &#x27;price&#x27;: 115.65&#125;</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><ul><li>映射函数</li></ul><p>语法：<strong>map(function, Iterable)</strong></p><ul><li>可以对可迭代对象中的每一个元素进行映射。分别去执行function,保留最后的执行结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [1, 2, 3, 4, 5]</span><br><span class="line">lst2 = [2, 4, 6, 8, 10]</span><br><span class="line"></span><br><span class="line">print(list(map(lambda x, y: x + y, lst1, lst2)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">[3, 6, 9, 12, 15]</span><br></pre></td></tr></table></figure><h2 id="issubclass"><a href="#issubclass" class="headerlink" title="issubclass()"></a>issubclass()</h2><ul><li>判断xxx类是否是yyy类型的子类</li><li>可以隔代判断</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Base:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Foo(Base):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Bar(Foo):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">print(issubclass(Bar, Foo))   # True</span><br><span class="line">print(issubclass(Foo, Bar))   # False</span><br><span class="line">print(issubclass(Bar, Base))  # True</span><br></pre></td></tr></table></figure><h2 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h2><ul><li>返回xxx是什么类型</li><li>可以精准的返回数据类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;hello&quot;</span>))  <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">obj = Person()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Person))  <span class="comment"># &lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(obj))     <span class="comment"># &lt;class &#x27;__main__.Person&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance()"></a>isinstance()</h2><ul><li>判断xxx对象是否是xxx类型</li><li>可以判断该对象是否是xxx家族体系中的(只能往上判断)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Animal:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Cat(Animal):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Persian_Cat(Cat):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">kitty = Cat()</span><br><span class="line">print(isinstance(kitty, Cat))           # True</span><br><span class="line">print(isinstance(kitty, Persian_Cat))   # False</span><br><span class="line">print(isinstance(kitty, Animal))        # True</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;lambda&quot;&gt;&lt;a href=&quot;#lambda&quot; class=&quot;headerlink&quot; title=&quot;lambda&quot;&gt;&lt;/a&gt;lambda&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;表示匿名函数&lt;/li&gt;
&lt;li&gt;为了解决一些简单的需求而设计的一句话函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;语法： &lt;strong&gt;函数名&lt;/strong&gt; &amp;#x3D; &lt;strong&gt;lambda 参数：返回值&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数的参数可以有多个，多个参数之间用逗号隔开&lt;/li&gt;
&lt;li&gt;匿名函数不管多复杂，只能写一行，且逻辑结束后直接返回数据&lt;/li&gt;
&lt;li&gt;返回值和正常的函数一样，可以是任意数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f = lambda n: n ** 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f(10))  # 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f.__name__)  # &amp;lt;lambda&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>内置函数一</title>
    <link href="https://bentech8.github.io/2025/03/16/python-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E4%B8%80/"/>
    <id>https://bentech8.github.io/2025/03/16/python-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E4%B8%80/</id>
    <published>2025-03-16T09:02:59.000Z</published>
    <updated>2025-03-16T09:06:44.973Z</updated>
    
    <content type="html"><![CDATA[<p>作用域相关</p><ul><li><p>locals()</p><p>功能：返回当前作用域中的名字</p></li><li><p>globals()</p><p>功能：返回全局作用域中的名字</p></li></ul><h2 id="迭代器-生成器相关"><a href="#迭代器-生成器相关" class="headerlink" title="迭代器&#x2F;生成器相关"></a>迭代器&#x2F;生成器相关</h2><ul><li><p>range()</p><p>功能：生成数据</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst = [i for i in range(10)]</span><br><span class="line">print(lst)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure><ul><li><p>iter()</p><p>功能：获取迭代器，内部实际使用的是__iter__()方法来获取迭代器</p></li><li><p>next()</p><p>功能：迭代器向下执行一次，内部实际使用了__next__()方法返回迭代器的下一个项目</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lst = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"></span><br><span class="line">ret = iter(lst)  # 获取迭代器</span><br><span class="line"></span><br><span class="line">print(next(ret)) # 0   执行迭代器</span><br></pre></td></tr></table></figure><h2 id="字符串类型代码的执行"><a href="#字符串类型代码的执行" class="headerlink" title="字符串类型代码的执行"></a>字符串类型代码的执行</h2><ul><li><p>eval()</p><p>功能：执行字符串类型的代码。并返回最终结果</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(eval(&quot;[11, 22, 33, 44]&quot;))  # [11, 22, 33, 44]</span><br><span class="line"></span><br><span class="line">print(eval(&quot;2+2&quot;))  # 4</span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">    print(666)</span><br><span class="line">eval(&quot;func()&quot;)  # 666</span><br></pre></td></tr></table></figure><ul><li><p>exec()</p><p>功能：执行字符串类型的代码</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">exec(&quot;&quot;&quot;</span><br><span class="line">for i in range(10):</span><br><span class="line">    print(i)</span><br><span class="line">&quot;&quot;&quot;)  # 0 1 2 3 4 5 6 7 8 9</span><br><span class="line"></span><br><span class="line">exec(&quot;&quot;&quot;</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;我是赛利亚&quot;)</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line">&quot;&quot;&quot;)  # 我是赛利亚</span><br></pre></td></tr></table></figure><ul><li><p>compile()</p><p>功能：将字符串类型的代码编译，有返回值的字符串形式代码用eval()求值，没有返回值的字符串形式代码用exec()执行</p><p>参数说明：</p><p>1）resource：要执行的代码，动态代码片段</p><p>2）文件名：代码存放的文件名，当传入第一个参数的时候，这个参数给空就可以了</p><p>3）模式，取值有3个：</p></li></ul><p>​    a) exec：一般放一些流程语句的时候</p><p>​    b) eval：resource只存放一个求值表达式</p><p>​    c) single：resource存放的代码有交互的时候，mode应为single，但只允话代码只有一行，否则报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">code = &quot;&quot;&quot;</span><br><span class="line">for i in range(5):</span><br><span class="line">    print(i)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">c1 = compile(code, &quot;&quot;, mode=&quot;exec&quot;)</span><br><span class="line">exec(c1)  # 0 1 2 3 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code2 = &quot;&quot;&quot;</span><br><span class="line">name = input(&quot;请输入你的名字：&quot;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">c2 = compile(code2, &quot;&quot;, mode=&quot;single&quot;)</span><br><span class="line">exec(c2)</span><br><span class="line">print(name) # Tom</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="输入输出相关"><a href="#输入输出相关" class="headerlink" title="输入输出相关"></a>输入输出相关</h2><ul><li><p>input()</p><p>功能：获取用户输入的内容</p></li><li><p>print()</p><p>功能：打印输出</p></li></ul><h2 id="内存相关"><a href="#内存相关" class="headerlink" title="内存相关"></a>内存相关</h2><ul><li><p>hash()</p><p>功能：获取对象的哈希值(int，bool，str，tuple)</p><p>注意：</p><p>\1) 数字的哈希值就是它本身</p><p>\2) 每次调用hash()得到的哈希值不一样(除数字外)，所以哈希值不能做密码</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num = 10</span><br><span class="line">s = &quot;Hello&quot;</span><br><span class="line"></span><br><span class="line">print(hash(num))  # 10</span><br><span class="line"></span><br><span class="line"># 第一次调用</span><br><span class="line">print(hash(s))  # 3718209680369926059</span><br><span class="line"></span><br><span class="line"># 再次调用</span><br><span class="line">print(hash(s))  # 263127024043316082</span><br></pre></td></tr></table></figure><ul><li><p>id()</p><p>功能：获取对象的内存地址</p></li></ul><h2 id="与文件相关"><a href="#与文件相关" class="headerlink" title="与文件相关"></a>与文件相关</h2><ul><li><p>open()</p><p>功能：用于打开一个文件，创建一个文件句柄</p></li></ul><h2 id="模块相关"><a href="#模块相关" class="headerlink" title="模块相关"></a>模块相关</h2><ul><li><p><strong>import</strong>()</p><p>功能：用于动态加载类和函数</p></li></ul><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><ul><li><p>help()</p><p>功能：函数用于查看函数或模块用途的详细说明</p></li></ul><h2 id="调用相关"><a href="#调用相关" class="headerlink" title="调用相关"></a>调用相关</h2><ul><li><p>callable()</p><p>功能：用于检查一个对象是否是可调用的。如果返回True， object有可能调用失败，但如果返回False，那么调用绝对不会成功</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = 10</span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">print(callable(n)) # False</span><br><span class="line"></span><br><span class="line">print(callable(func)) # True</span><br></pre></td></tr></table></figure><h2 id="查看内置属性"><a href="#查看内置属性" class="headerlink" title="查看内置属性"></a>查看内置属性</h2><ul><li><p>dir()</p><p>功能：查看对象的内置属性，方法。访问的是对象的__dir__()方法</p></li></ul><h2 id="基础数据类型相关"><a href="#基础数据类型相关" class="headerlink" title="基础数据类型相关"></a>基础数据类型相关</h2><h3 id="和数字相关"><a href="#和数字相关" class="headerlink" title="和数字相关"></a>和数字相关</h3><h4 id="a-数据类型"><a href="#a-数据类型" class="headerlink" title="a) 数据类型"></a>a) 数据类型</h4><ul><li><p>bool()</p><p>功能：将给定的数据转换成bool值。如果不给值，返回False</p></li><li><p>int()</p><p>功能：将给定的数据转换成int值。如果不给值，返回0</p></li><li><p>float()</p><p>功能：将给定的数据转换成float值，也就是小数</p></li><li><p>complex()</p><p>功能：创建一个复数，第一个参数为实部，第二个参数为虚部，或者第一个参数直接用字符串来描述复数</p></li></ul><h4 id="b-进制转换"><a href="#b-进制转换" class="headerlink" title="b) 进制转换"></a>b) 进制转换</h4><ul><li><p>bin()</p><p>功能：将给的参数转换成二进制</p></li><li><p>otc()</p><p>功能：将给的参数转换成八进制</p></li><li><p>hex()</p><p>功能：将给的参数转换成十六进制</p></li></ul><h4 id="c-数学运算"><a href="#c-数学运算" class="headerlink" title="c) 数学运算"></a>c) 数学运算</h4><ul><li><p>abs()</p><p>功能：返回绝对值</p></li><li><p>divmod()</p><p>功能：返回商和余数</p></li><li><p>round()</p><p>功能：四舍五入</p><p>对于x.5，如果整数个位数为偶数靠近偶数进行舍弃，如果整数个位数为奇数靠近偶数进行舍弃</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(round(4.5)) # 4</span><br><span class="line">print(round(5.5)) # 6</span><br><span class="line">print(round(5.4)) # 5</span><br></pre></td></tr></table></figure><ul><li><p>pow(a, b)</p><p>功能：求a的b次幂，如果有三个参数，则求完次幂后对第三个数取余</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(pow(2, 3)) # 8</span><br><span class="line"></span><br><span class="line">print(pow(2, 3, 5)) # 3</span><br></pre></td></tr></table></figure><ul><li><p>sum(可迭代对象)</p><p>功能：求和</p></li><li><p>min()</p><p>功能：求最小值</p></li><li><p>max()</p><p>功能：求最大值</p></li></ul><h3 id="和数据结构相关"><a href="#和数据结构相关" class="headerlink" title="和数据结构相关"></a>和数据结构相关</h3><h4 id="a-列表和元组"><a href="#a-列表和元组" class="headerlink" title="a) 列表和元组"></a>a) 列表和元组</h4><ul><li><p>list()</p><p>功能：将一个可迭代对象转换成列表</p></li><li><p>tuple()</p><p>功能：将一个可迭代对象转换成元组</p></li><li><p>reversed()</p><p>功能：将一个序列翻转，返回翻转序列的迭代器</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lst = [1, 2, 3, 4, 5, 6]</span><br><span class="line">ret = reversed(lst)</span><br><span class="line">print(ret)  # &lt;list_reverseiterator object at 0x000001B589038208&gt;</span><br><span class="line"></span><br><span class="line">for i in ret:</span><br><span class="line">    print(i)  # 6 5 4 3 2 1</span><br></pre></td></tr></table></figure><ul><li><p>slice</p><p>功能：列表的切片</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [1, 2, 3, 4, 5, 6]</span><br><span class="line"></span><br><span class="line">s = slice(1, 5, 2)</span><br><span class="line">print(lst[s])  # [2, 4]</span><br></pre></td></tr></table></figure><h4 id="b）-字符串相关"><a href="#b）-字符串相关" class="headerlink" title="b） 字符串相关"></a>b） 字符串相关</h4><ul><li><p>str()</p><p>功能：将数据转化成字符串</p></li><li><p>format()</p><p>功能：与具体数据相关，用于计算各种小数，精算等</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 字符串</span><br><span class="line">print(format(&#x27;test&#x27;, &#x27;&lt;20&#x27;))    # 左对齐 </span><br><span class="line">print(format(&#x27;test&#x27;, &#x27;&gt;20&#x27;))    # 右对齐 </span><br><span class="line">print(format(&#x27;test&#x27;, &#x27;^20&#x27;))    # 居中 </span><br><span class="line"></span><br><span class="line"># 数值 </span><br><span class="line">print(format(3, &#x27;b&#x27;))           # ⼆进制 </span><br><span class="line">print(format(97, &#x27;c&#x27;))          # 转换成unicode字符</span><br><span class="line">print(format(11, &#x27;d&#x27;))          # ⼗进制 </span><br><span class="line">print(format(11, &#x27;o&#x27;))          # ⼋进制 </span><br><span class="line">print(format(11, &#x27;x&#x27;))          # ⼗六进制(⼩写字母) </span><br><span class="line">print(format(11, &#x27;X&#x27;))          # ⼗六进制(⼤写字母) </span><br><span class="line">print(format(11, &#x27;n&#x27;))          # 和d一样 </span><br><span class="line">print(format(11))               # 和d一样 </span><br><span class="line"></span><br><span class="line"># 浮点数 </span><br><span class="line">print(format(123456789, &#x27;e&#x27;))           # 科学计数法. 默认保留6位小数 </span><br><span class="line">print(format(123456789, &#x27;0.2e&#x27;))        # 科学计数法. 保留2位小数(小写) </span><br><span class="line">print(format(123456789, &#x27;0.2E&#x27;))        # 科学计数法. 保留2位小数(大写) </span><br><span class="line">print(format(1.23456789, &#x27;f&#x27;))          # 小数点计数法. 保留6位小数 </span><br><span class="line">print(format(1.23456789, &#x27;0.2f&#x27;))       # 小数点计数法. 保留2位小数 </span><br><span class="line">print(format(1.23456789, &#x27;0.10f&#x27;))      # 小数点计数法. 保留10位小数 </span><br><span class="line">print(format(1.23456789e+10000, &#x27;F&#x27;))   # 小数点计数法.</span><br></pre></td></tr></table></figure><ul><li><p>bytes()</p><p>功能：把字符串转化成bytes类型</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;你好&quot;</span><br><span class="line"></span><br><span class="line">bs = bytes(s, encoding=&quot;utf-8&quot;)</span><br><span class="line">print(bs)  # b&#x27;\xe4\xbd\xa0\xe5\xa5\xbd&#x27;</span><br></pre></td></tr></table></figure><ul><li><p>bytearray()</p><p>功能：返回一个新字节数组，这个数组里的元素是可变的，并且每个元素的值的范围是[0, 256]</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ret = bytearray(&#x27;alex&#x27;, encoding=&#x27;utf-8&#x27;)</span><br><span class="line">print(ret)  # bytearray(b&#x27;alex&#x27;)</span><br><span class="line"></span><br><span class="line">ret[0] = 65</span><br><span class="line">print(ret) # bytearray(b&#x27;Alex&#x27;)</span><br></pre></td></tr></table></figure><ul><li><p>memoryview()</p><p>功能：查看bytes在内存中的情况</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;你好&quot;</span><br><span class="line">ret = memoryview(s.encode(&quot;utf-8&quot;))</span><br><span class="line">print(ret)  # &lt;memory at 0x0000022FC0071048&gt;</span><br></pre></td></tr></table></figure><ul><li><p>ord()</p><p>功能：输入字符找带字符编码的位置</p></li><li><p>chr()</p><p>功能：输入位置数字找出对应的字符</p></li><li><p>ascii()</p><p>功能：在ascii码中就返回这个值，如里不在就返回\u…</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;你好&quot;</span><br><span class="line">print(ascii(s))  # &#x27;\u4f60\u597d&#x27;</span><br></pre></td></tr></table></figure><ul><li><p>repr()</p><p>功能：返回一个对象的官方表示形式</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;你好\我叫赛利亚&quot;</span><br><span class="line">print(repr(s)) # &#x27;你好\\我叫赛利亚&#x27;</span><br><span class="line">print(s) #你好\我叫赛利亚</span><br></pre></td></tr></table></figure><h4 id="c）-数据集合"><a href="#c）-数据集合" class="headerlink" title="c） 数据集合"></a>c） 数据集合</h4><ul><li><p>dict()</p><p>功能：创建一个字典</p></li><li><p>set()</p><p>功能：创建一个集合</p></li><li><p>frozenset()</p><p>功能：创建一个冻结的集合，冻结的集合不能进行添加和删除操作</p></li></ul><h4 id="d-其他相关"><a href="#d-其他相关" class="headerlink" title="d) 其他相关"></a>d) 其他相关</h4><ul><li><p>len()</p><p>功能：返回一个对象中的元素的个数</p></li><li><p>enumerate(可迭代对象，start&#x3D;0)</p><p>功能：获取集合的枚举对象</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33]</span><br><span class="line">for index, el in enumerate(lst):</span><br><span class="line">    print(index, el)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">0 11</span><br><span class="line">1 22</span><br><span class="line">2 33</span><br></pre></td></tr></table></figure><ul><li><p>all()</p><p>功能：可迭代对象中全部是True，结果才是True</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(all([1, 2, 0, True])) # False</span><br></pre></td></tr></table></figure><ul><li><p>any()</p><p>功能：可迭代对象中有一个是True， 结果就是True</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(any([1, 2, 0, True])) # True</span><br></pre></td></tr></table></figure><ul><li><p>zip()</p><p>功能：函数用于将可迭代对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的一个可迭代对象zip object。如果各个迭代器的元素不一致，则返回对象长度与最短的对象相同</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [1, 2, 3]</span><br><span class="line">lst2 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br><span class="line">lst3 = (11, 22, 33, 44, 55)</span><br><span class="line"></span><br><span class="line">print(zip(lst1, lst2, lst3))       #  &lt;zip object at 0x000001E7D275BF48&gt;</span><br><span class="line">print(list(zip(lst1, lst2, lst3))) #[(1, &#x27;a&#x27;, 11), (2, &#x27;b&#x27;, 22), (3, &#x27;c&#x27;, 33)]</span><br><span class="line"></span><br><span class="line">for i in zip(lst1, lst2, lst3):</span><br><span class="line">    print(i)                       # (1, &#x27;a&#x27;, 11)  (2, &#x27;b&#x27;, 22) (3, &#x27;c&#x27;, 33)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;作用域相关&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;locals()&lt;/p&gt;
&lt;p&gt;功能：返回当前作用域中的名字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;globals()&lt;/p&gt;
&lt;p&gt;功能：返回全局作用域中的名字&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;迭代器-生成器相关&quot;&gt;&lt;a href=&quot;#迭代器-生成器相关&quot; class=&quot;headerlink&quot; title=&quot;迭代器&amp;#x2F;生成器相关&quot;&gt;&lt;/a&gt;迭代器&amp;#x2F;生成器相关&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;range()&lt;/p&gt;
&lt;p&gt;功能：生成数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lst = [i for i in range(10)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(lst)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>初识函数</title>
    <link href="https://bentech8.github.io/2025/03/16/python-%E5%88%9D%E8%AF%86%E5%87%BD%E6%95%B0/"/>
    <id>https://bentech8.github.io/2025/03/16/python-%E5%88%9D%E8%AF%86%E5%87%BD%E6%95%B0/</id>
    <published>2025-03-16T08:57:01.000Z</published>
    <updated>2025-03-16T09:01:11.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数定义及调用"><a href="#函数定义及调用" class="headerlink" title="函数定义及调用"></a>函数定义及调用</h2><ul><li>函数：对功能和动作的封装</li><li>使用def关键字来定义函数</li><li>使用”函数名()”可调用函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def 函数名():</span><br><span class="line">    函数体函数名()  # 调用函数</span><br></pre></td></tr></table></figure><h3 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h3><ul><li>函数名就是变量名，其命名规范与变量名命名规范一致</li><li>函数名存储的是函数的内存地址</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    pass</span><br><span class="line">print(func) # &lt;function func at 0x0000023A55019A60&gt;</span><br></pre></td></tr></table></figure><ul><li>函数名可以赋值给其他变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    print(&quot;Hello World!&quot;)</span><br><span class="line"></span><br><span class="line">ret = func</span><br><span class="line">ret()  # Hello World!</span><br></pre></td></tr></table></figure><ul><li>函数名可以当做容器类的元素</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def func_1():</span><br><span class="line">    print(&quot;-----1-----&quot;)</span><br><span class="line"></span><br><span class="line">def func_2():</span><br><span class="line">    print(&quot;-----2-----&quot;)</span><br><span class="line"></span><br><span class="line">def func_3():</span><br><span class="line">    print(&quot;-----3-----&quot;)</span><br><span class="line"></span><br><span class="line">def func_4():</span><br><span class="line">    print(&quot;-----4-----&quot;)</span><br><span class="line"></span><br><span class="line">lst = [func_1, func_2, func_3, func_4]</span><br><span class="line">for i in lst:</span><br><span class="line">    i()</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">-----1-----</span><br><span class="line">-----2-----</span><br><span class="line">-----3-----</span><br><span class="line">-----4-----</span><br></pre></td></tr></table></figure><ul><li>函数名可以为函数的参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def func_1():</span><br><span class="line">    print(&quot;-----1-----&quot;)</span><br><span class="line"></span><br><span class="line">def func_2():</span><br><span class="line">    print(&quot;-----2-----&quot;)</span><br><span class="line"></span><br><span class="line">def func(fn):</span><br><span class="line">    fn()</span><br><span class="line"></span><br><span class="line">func(func_1)  # -----1-----</span><br></pre></td></tr></table></figure><ul><li>函数名可以为函数的返回值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    def func_1():</span><br><span class="line">        print(&quot;-----func_1-----&quot;)</span><br><span class="line">    return func_1</span><br><span class="line"></span><br><span class="line">func()()  # -----func_1-----</span><br></pre></td></tr></table></figure><p>打印函数名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    def func_1():</span><br><span class="line">        print(&quot;-----func_1-----&quot;)</span><br><span class="line">    return func_1</span><br><span class="line"></span><br><span class="line">print(func.__name__)  # func</span><br></pre></td></tr></table></figure><h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><p>  执行完函数后，可以使用return来返回结果</p><ul><li>return作用：终止函数运行</li><li>如果函数体无return，则调用函数返回None</li><li>如果函数体有return，但return后未有值，则返回None</li><li>如果函数体有return，且return后有一个值或变量名，则返回值或变量名所指向的值</li><li>如果函数体有return，且return后有多个值，则多个值以元组形式返回给调用者，调用者可直接解构成多个变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def operation(a, b):</span><br><span class="line">    sum = a + b</span><br><span class="line">    sub = a - b</span><br><span class="line">    qud = a * b</span><br><span class="line">    qut = a / b</span><br><span class="line">    return sum, sub, qud, qut</span><br><span class="line"></span><br><span class="line">x, y, z, w = operation(1, 2)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h3><p>  写在函数声明的位置的变量</p><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def regist(id, name, age, gender):</span><br><span class="line">    print(id, name, age, gender)</span><br><span class="line"></span><br><span class="line">regist(1, &quot;Tom&quot;, 18, &quot;男&quot;)  # 1 Tom 18 男</span><br></pre></td></tr></table></figure><h4 id="默认值参数"><a href="#默认值参数" class="headerlink" title="默认值参数"></a>默认值参数</h4><p>  默认值参数可以把函数共性的参数问题进行提炼，以减少输入，提高输入效率</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def regist(id, name, age, gender=&quot;男&quot;):</span><br><span class="line">    print(id, name, age, gender)</span><br><span class="line"></span><br><span class="line">regist(1, &quot;Tom&quot;, 18) # 1 Tom 18 男</span><br></pre></td></tr></table></figure><h4 id="混合参数-位置参数-默认值参数"><a href="#混合参数-位置参数-默认值参数" class="headerlink" title="混合参数(位置参数+默认值参数)"></a>混合参数(位置参数+默认值参数)</h4><p>  位置参数在前，默认值参数在后，否则报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def regist(id, name, gender=&quot;男&quot;, age):</span><br><span class="line">    print(id, name, age, gender)</span><br><span class="line"></span><br><span class="line">regist(1, &quot;Tom&quot;, 18) # SyntaxError: non-default argument follows default argument</span><br></pre></td></tr></table></figure><h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><p>a.动态接收位置参数——*args</p><ul><li>*表示动态传参，可以接受所有的位置参数</li><li>传参的时候自动的把实参打包成元组，交给形参</li><li>动态传参可以不传参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def func(*args):</span><br><span class="line">    print(args)</span><br><span class="line"></span><br><span class="line">func(11, 22, 33, 44, 55, 66)  # (11, 22, 33, 44, 55, 66)</span><br><span class="line">def func(*args):</span><br><span class="line">    print(args)</span><br><span class="line"></span><br><span class="line">func()  # ()</span><br></pre></td></tr></table></figure><p>b.动态接收关键字参数——**kwargs</p><ul><li>接收到的内容放在字典里</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def func(**kwargs):</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(a=11, b=22, c=33, d=44, e=55) # &#123;&#x27;a&#x27;: 11, &#x27;b&#x27;: 22, &#x27;c&#x27;: 33, &#x27;d&#x27;: 44, &#x27;e&#x27;: 55&#125;</span><br></pre></td></tr></table></figure><h4 id="形参顺序"><a href="#形参顺序" class="headerlink" title="形参顺序"></a>形参顺序</h4><p>顺序：位置参数，*args，默认值参数，**kwargs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def func(a, *args, b=&quot;&quot;, **kwargs):</span><br><span class="line">    print(a, args, b, kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(11, 22, 33, 44, b=&quot;男&quot;, c=66, d=77,) # 11 (22, 33, 44) 男 &#123;&#x27;c&#x27;: 66, &#x27;d&#x27;: 77&#125;</span><br></pre></td></tr></table></figure><h3 id="打散"><a href="#打散" class="headerlink" title="打散"></a>打散</h3><ul><li>* + string&#x2F;list&#x2F;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(*[1, 2, 3, 4, 5, 6]) # 1 2 3 4 5 6</span><br></pre></td></tr></table></figure><ul><li>** + dict</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def func(**kwargs):</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line">func(**&#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18, &quot;hobby&quot;: &quot;football&quot;&#125;)  # &#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 18, &#x27;hobby&#x27;: &#x27;football&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="无敌传参"><a href="#无敌传参" class="headerlink" title="无敌传参"></a>无敌传参</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def func(*args, **kwargs):</span><br><span class="line">    print(args, kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(11, 22, 33, 44, a=55, b=66, c=77, d=88)  #(11, 22, 33, 44) &#123;&#x27;a&#x27;: 55, &#x27;b&#x27;: 66, &#x27;c&#x27;: 77, &#x27;d&#x27;: 88&#125;</span><br></pre></td></tr></table></figure><h3 id="实参"><a href="#实参" class="headerlink" title="实参"></a>实参</h3><p>  在函数调用的时候给函数传递的值。实际执行的时候给函数传递的信息</p><h4 id="位置参数-1"><a href="#位置参数-1" class="headerlink" title="位置参数"></a>位置参数</h4><p>  按照形参顺序给把各实参赋值给相应的形参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def introduction(name, age):</span><br><span class="line">    print(&quot;My name is %s, I&#x27;m %s years old.&quot; % (name, age))</span><br><span class="line"></span><br><span class="line">introduction(&quot;Tom&quot;, 18)  # My name is Tom, I&#x27;m 18 years old.</span><br><span class="line">def introduction(name, age):</span><br><span class="line">    print(&quot;My name is %s, I&#x27;m %s years old.&quot; % (name, age))</span><br><span class="line"></span><br><span class="line">introduction(18, &quot;Tom&quot;)  # My name is 18, I&#x27;m Tom years old.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>  根据形参声明的变量名来传递信息，关键字实参不需要考虑形参顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def introduction(name, age):</span><br><span class="line">    print(&quot;My name is %s, I&#x27;m %s years old.&quot; % (name, age))</span><br><span class="line"></span><br><span class="line">introduction(age=18, name=&quot;Tom&quot;) # My name is Tom, I&#x27;m 18 years old.</span><br></pre></td></tr></table></figure><h4 id="混合参数-位置参数-关键字参数"><a href="#混合参数-位置参数-关键字参数" class="headerlink" title="混合参数(位置参数+关键字参数)"></a>混合参数(位置参数+关键字参数)</h4><p>  位置参数在前，关键字参数在后，否则报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def introduction(name, age, sex):</span><br><span class="line">    print(&quot;My name is %s, I&#x27;m %s years old %s&quot; % (name, age, sex))</span><br><span class="line"></span><br><span class="line">introduction(&quot;Tom&quot;, sex=&quot;boy&quot;, age=18) # My name is Tom, I&#x27;m 18 years old boy</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def introduction(name, age, sex):</span><br><span class="line">    print(&quot;My name is %s, I&#x27;m %s years old %s&quot; % (name, age, sex))</span><br><span class="line"></span><br><span class="line">introduction(&quot;Tom&quot;, sex=&quot;boy&quot;, 18) # SyntaxError: positional argument follows keyword argument</span><br></pre></td></tr></table></figure><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><p>  给函数传递信息的时候将实际参数交给形式参数的过程</p><h2 id="命名空间和作用域"><a href="#命名空间和作用域" class="headerlink" title="命名空间和作用域"></a>命名空间和作用域</h2><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><ul><li>内置命名空间：存放python解释器为我们提供的名字，list，tuple，str，int这些都是内置命名空间</li><li>全局命名空间：py文件中，函数外声明的变量都属于全局命名空间</li><li>局部命名空间：在函数中声明的变量会放在局部命名空间</li><li>加载顺序：内置命名空间—&gt;全局命名空间—&gt;局部命名空间(函数被执行的时候)</li><li>取值顺序：局部命名空间—&gt;全局命名空间—&gt;内置命名空间</li></ul><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li>全局作用域：全局命名空间 + 内置命名空间</li><li>局部作用域：局部命名空间</li><li>变量可从局部向全局寻找，但不可从全局向局部寻找</li></ul><h3 id="locals-和-globals"><a href="#locals-和-globals" class="headerlink" title="locals() 和 globals()"></a>locals() 和 globals()</h3><ul><li>locals()：查看当前作用域中的名字，如果在函数中调用locals()，则查看局部作用域中的名字，如果在函数外调用locals()，则查看全局作用域中的名字</li><li>globals()：查看全局作用域中(内置+全局)中的名字</li></ul><h3 id="global-和-nonlocal"><a href="#global-和-nonlocal" class="headerlink" title="global 和 nonlocal"></a>global 和 nonlocal</h3><h4 id="global"><a href="#global" class="headerlink" title="global"></a>global</h4><ul><li>如果函数内部未引入全局变量，则函数可以使用全局变量，但无法修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">    b = a + 10</span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line">func()  # 10 20</span><br></pre></td></tr></table></figure><ul><li>如果利用global在函数内引入全局变量，则在函数内部可对全局变量进行修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">    global a</span><br><span class="line">    a = 20</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line">print(a)  # 20 20</span><br></pre></td></tr></table></figure><ul><li>如果利用global在函数内部引入全局变量，而函数外无此变量，则此局部变量升华为全局变量，即此变量为全局变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    global a</span><br><span class="line">    a = 20</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line">print(a)  # 20 20 </span><br></pre></td></tr></table></figure><h4 id="nonlocal"><a href="#nonlocal" class="headerlink" title="nonlocal"></a>nonlocal</h4><ul><li>在局部命名空间，引入上一层名称空间中的名字，如果上一层没有，继续往上一层中寻找，如果整个局部命名空间都无，则报错</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def func1():</span><br><span class="line">    a = 10</span><br><span class="line">    def func2():</span><br><span class="line">        nonlocal a</span><br><span class="line">        a = 20</span><br><span class="line">        print(a)</span><br><span class="line">    print(a)</span><br><span class="line">    func2()</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">func1() # 10 20 20</span><br></pre></td></tr></table></figure><h2 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h2><ul><li>函数内部可以嵌套函数</li><li>每一层都会产生独自的名称空间，在寻找变量时，则为向上一层一层寻找。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def func1():</span><br><span class="line">    a = 10</span><br><span class="line">    def func2():</span><br><span class="line">        def func3():</span><br><span class="line">            nonlocal a</span><br><span class="line">            a = 20</span><br><span class="line">        print(a)</span><br><span class="line">        func3()</span><br><span class="line">    print(a)</span><br><span class="line">    func2()</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">func1()  # 10 10 20 </span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>  内层函数对外层函数的变量的引用</p><p>作用：</p><ul><li>保护变量不受侵害</li><li>可以让一个变量常驻内存</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def outer():</span><br><span class="line">    name = &quot;Tom&quot;</span><br><span class="line">    def inner():</span><br><span class="line">        print(name)</span><br><span class="line">    inner()</span><br><span class="line"></span><br><span class="line">outer() # Tom</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="检测函数是否为闭包"><a href="#检测函数是否为闭包" class="headerlink" title="检测函数是否为闭包"></a>检测函数是否为闭包</h3><p>  可以使用__closure__来检测函数是否为闭包</p><ul><li>如果返回cell，则为闭包</li><li>如果返回None，则不是闭包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def outer():</span><br><span class="line">    name = &quot;Tom&quot;</span><br><span class="line">    def inner():</span><br><span class="line">        print(name)</span><br><span class="line">    inner()</span><br><span class="line">    print(inner.__closure__)</span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line">Tom</span><br><span class="line">(&lt;cell at 0x000001F751868588: str object at 0x000001F7518F80A0&gt;,)</span><br></pre></td></tr></table></figure><h3 id="变量常驻内存说明"><a href="#变量常驻内存说明" class="headerlink" title="变量常驻内存说明"></a>变量常驻内存说明</h3><p>  函数外边调用内部函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def outer():</span><br><span class="line">    name = &quot;Tom&quot;</span><br><span class="line">    def inner():</span><br><span class="line">        print(name)</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">ret = outer()</span><br><span class="line">ret()  # Tom</span><br></pre></td></tr></table></figure><p>   如果一个函数执行完毕，则这个函数中的变量以及局部命名空间中的内容都将会被销毁。但由于外界可以通过ret()去访问内部函数。那这个时候内部函数访问的时间和时机就不一定了。如果此时，闭包中变量被销毁了，那么内部函数将不能正常执行。所以，Python规定，如果在内部函数中访问了外层函数的变量，那么这个么变量将不会消亡。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;函数定义及调用&quot;&gt;&lt;a href=&quot;#函数定义及调用&quot; class=&quot;headerlink&quot; title=&quot;函数定义及调用&quot;&gt;&lt;/a&gt;函数定义及调用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;函数：对功能和动作的封装&lt;/li&gt;
&lt;li&gt;使用def关键字来定义函数&lt;/li&gt;
&lt;li&gt;使用”函数名()”可调用函数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def 函数名():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    函数体函数名()  # 调用函数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&quot;函数名&quot;&gt;&lt;a href=&quot;#函数名&quot; class=&quot;headerlink&quot; title=&quot;函数名&quot;&gt;&lt;/a&gt;函数名&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数名就是变量名，其命名规范与变量名命名规范一致&lt;/li&gt;
&lt;li&gt;函数名存储的是函数的内存地址&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>推导式</title>
    <link href="https://bentech8.github.io/2025/03/16/python-%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
    <id>https://bentech8.github.io/2025/03/16/python-%E6%8E%A8%E5%AF%BC%E5%BC%8F/</id>
    <published>2025-03-16T08:54:43.000Z</published>
    <updated>2025-03-16T08:55:46.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><ul><li>写点：[结果 for 变量 in 可迭代对象 if 判断]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst = [i for i in range(1, 20) if i % 2 == 0]</span><br><span class="line">print(lst) # [2, 4, 6, 8, 10, 12, 14, 16, 18]</span><br></pre></td></tr></table></figure><h2 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h2><ul><li>写法：[结果 for 变量 in 可迭代对象 if 判断]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33]</span><br><span class="line">dic = &#123;i: lst[i] for i in range(len(lst))&#125;</span><br><span class="line">print(dic)  # &#123;0: 11, 1: 22, 2: 33&#125;</span><br></pre></td></tr></table></figure><h2 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h2><ul><li>写法：[结果 for 变量 in 可迭代对象 if 判断]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [1, 8, 33, 44, -1, -8, 12]</span><br><span class="line">s = &#123;abs(i) for i in lst&#125;</span><br><span class="line">print(s)  # &#123;1, 33, 8, 44, 12&#125;</span><br></pre></td></tr></table></figure><p>结论：</p><ul><li>推导式比较耗内存。一次加载。而生成器表达式几乎不占用内存。使用的时候才分配和使用内存。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;列表推导式&quot;&gt;&lt;a href=&quot;#列表推导式&quot; class=&quot;headerlink&quot; title=&quot;列表推导式&quot;&gt;&lt;/a&gt;列表推导式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;写点：[结果 for 变量 in 可迭代对象 if 判断]&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lst = [i for i in range(1, 20) if i % 2 == 0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(lst) # [2, 4, 6, 8, 10, 12, 14, 16, 18]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&quot;字典推导式&quot;&gt;&lt;a href=&quot;#字典推导式&quot; class=&quot;headerlink&quot; title=&quot;字典推导式&quot;&gt;&lt;/a&gt;字典推导式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;写法：[结果 for 变量 in 可迭代对象 if 判断]&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Set</title>
    <link href="https://bentech8.github.io/2025/03/16/python-set/"/>
    <id>https://bentech8.github.io/2025/03/16/python-set/</id>
    <published>2025-03-16T08:51:30.000Z</published>
    <updated>2025-03-16T08:54:01.480Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>set中的元素：可hash(int, str, tuple, bool)，不重复，底层存储无序</li><li>set集合中的元素必须是可hash，但set本身是不可hash，是可变的数据类型</li></ul><h2 id="应用-重点"><a href="#应用-重点" class="headerlink" title="应用(重点)"></a>应用(重点)</h2><p>  利用set中元素不可重复，可给list去重</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 11, 22, 22, 33, 33, 44, 44, 55, 55]</span><br><span class="line"></span><br><span class="line">lst = list(set(lst))</span><br><span class="line">print(lst)  # [33, 11, 44, 22, 55]  结果无序，但已去重</span><br></pre></td></tr></table></figure><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><ul><li><p>add</p><p>重复的内容不会被添加到set集合中，新增对象须为可hash数据类型</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;11, 22, 33, 44&#125;</span><br><span class="line"></span><br><span class="line">s.add(&quot;hello&quot;)</span><br><span class="line">print(add)  # &#123;33, 11, 44, &#x27;hello&#x27;, 22&#125;</span><br><span class="line"></span><br><span class="line">s.add(11)</span><br><span class="line">print(s)  # &#123;33, 11, 44, &#x27;hello&#x27;, 22&#125;</span><br></pre></td></tr></table></figure><ul><li><p>update</p><p>迭代更新，新增对象可为可hash或不可hash数据类型</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;11, 22, 33, 44&#125;</span><br><span class="line"></span><br><span class="line">s.update(&quot;hello&quot;)</span><br><span class="line">print(s)  # &#123;33, &#x27;l&#x27;, 11, 44, &#x27;e&#x27;, 22, &#x27;o&#x27;, &#x27;h&#x27;&#125;</span><br><span class="line">s = &#123;11, 22, 33, 44&#125;</span><br><span class="line"></span><br><span class="line">s.update([55, 66, 77])</span><br><span class="line">print(s)  # &#123;33, 66, 11, 44, 77, 22, 55&#125;</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><ul><li><p>pop</p><p>随机弹出一个</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;11, 22, 33, 44&#125;</span><br><span class="line"></span><br><span class="line">num = s.pop()</span><br><span class="line">print(s) # &#123;11, 44, 22&#125;</span><br><span class="line">print(num) # 33</span><br></pre></td></tr></table></figure><ul><li><p>remove</p><p>根据元素内容进行删除，若元素不存在，则报错</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;11, 22, 33, 44&#125;</span><br><span class="line"></span><br><span class="line">s.remove(11)</span><br><span class="line">print(s)  # &#123;33, 44, 22&#125;</span><br></pre></td></tr></table></figure><ul><li><p>clear</p><p>清空set集合，如果set集合是空的，打印出来是set()，须与dict区分</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;11, 22, 33, 44&#125;</span><br><span class="line"></span><br><span class="line">s.clear()</span><br><span class="line">print(s)  # set()</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><ul><li>set集合中数据没有索引，也没法定位一个元素，所以没有办法进行直接修改</li><li>可采用先删除后添加方式完成修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;11, 22, 33, 44&#125;</span><br><span class="line"></span><br><span class="line">s.remove(11)</span><br><span class="line">s.add(55)</span><br><span class="line">print(s)  # &#123;33, 44, 22, 55&#125;</span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>  set是一个可迭代对象，可进行for循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for el in s:</span><br><span class="line">    print(el)</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h3><ul><li>&amp;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;11, 22, 33, 44&#125;</span><br><span class="line">s2 = &#123;33, 44, 55&#125;</span><br><span class="line"></span><br><span class="line">print(s1 &amp; s2)  # &#123;33, 44&#125;</span><br></pre></td></tr></table></figure><ul><li>intersection</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;11, 22, 33, 44&#125;</span><br><span class="line">s2 = &#123;33, 44, 55&#125;</span><br><span class="line"></span><br><span class="line">print(s1.intersection(s2)) # &#123;33, 44&#125;</span><br></pre></td></tr></table></figure><h3 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h3><ul><li>|</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;11, 22, 33, 44&#125;</span><br><span class="line">s2 = &#123;33, 44, 55&#125;</span><br><span class="line"></span><br><span class="line">print(s1 | s2)  # &#123;33, 22, 55, 11, 44&#125;</span><br></pre></td></tr></table></figure><ul><li>union</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;11, 22, 33, 44&#125;</span><br><span class="line">s2 = &#123;33, 44, 55&#125;</span><br><span class="line"></span><br><span class="line">print(s1.union(s2))  # &#123;33, 22, 55, 11, 44&#125;</span><br></pre></td></tr></table></figure><h3 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h3><p>  s1 - s2：得到s1中单独存在的</p><ul><li>-</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;11, 22, 33, 44&#125;</span><br><span class="line">s2 = &#123;33, 44, 55&#125;</span><br><span class="line"></span><br><span class="line">print(s1 - s2)  # &#123;11, 22&#125;</span><br></pre></td></tr></table></figure><ul><li>difference</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;11, 22, 33, 44&#125;</span><br><span class="line">s2 = &#123;33, 44, 55&#125;</span><br><span class="line"></span><br><span class="line">print(s1.difference(s2))  # &#123;11, 22&#125;</span><br></pre></td></tr></table></figure><h3 id="反交集"><a href="#反交集" class="headerlink" title="反交集"></a>反交集</h3><p>  s1 ^ s2：得到一个新的集合，里面元素为两集合（s1, s2）不相同的元素</p><ul><li>^</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;11, 22, 33, 44&#125;</span><br><span class="line">s2 = &#123;33, 44, 55&#125;</span><br><span class="line"></span><br><span class="line">print(s1 ^ s2)  # &#123;22, 55, 11&#125;</span><br></pre></td></tr></table></figure><ul><li>symmetric_difference</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;11, 22, 33, 44&#125;</span><br><span class="line">s2 = &#123;33, 44, 55&#125;</span><br><span class="line"></span><br><span class="line">print(s1.symmetric_difference(s2))  # &#123;22, 55, 11&#125;</span><br></pre></td></tr></table></figure><h3 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h3><p>  s1 &lt; s2:判断s1是否为s2子集，返回True or False</p><ul><li>&lt;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;11, 22, 33, 44&#125;</span><br><span class="line">s2 = &#123;33, 44, 55&#125;</span><br><span class="line"></span><br><span class="line">print(s1 &lt; s2)  # False</span><br></pre></td></tr></table></figure><ul><li>issubset</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;11, 22, 33, 44&#125;</span><br><span class="line">s2 = &#123;11, 22, 33, 44, 55&#125;</span><br><span class="line"></span><br><span class="line">print(s1.issubset(s2)) # True</span><br></pre></td></tr></table></figure><h3 id="超集"><a href="#超集" class="headerlink" title="超集"></a>超集</h3><p>  s1 &gt; s2：判断s1是否为s2的超集，也即s2是否为s1的子集，返回True or False</p><ul><li>&gt;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;11, 22, 33, 44&#125;</span><br><span class="line">s2 = &#123;11, 22, 33&#125;</span><br><span class="line"></span><br><span class="line">print(s1 &gt; s2)  # True</span><br></pre></td></tr></table></figure><ul><li>issuperset</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;11, 22, 33, 44&#125;</span><br><span class="line">s2 = &#123;11, 22, 33&#125;</span><br><span class="line"></span><br><span class="line">print(s1.issuperset(s2))  # True</span><br></pre></td></tr></table></figure><h3 id="frozenset"><a href="#frozenset" class="headerlink" title="frozenset"></a>frozenset</h3><ul><li>frozenset是一种不可变，可hash的集合</li><li>通过frozenset可将可变的数据类型转换成不可变，可hash的frozenset集合</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = [44, 55, 66]</span><br><span class="line"></span><br><span class="line">s1 = &#123;11, 22, 33, s&#125;  # 报错  TypeError: unhashable type: &#x27;list&#x27;</span><br><span class="line">s = frozenset([44, 55, 66])print(s)  # frozenset(&#123;66, 44, 55&#125;)</span><br><span class="line"></span><br><span class="line">s1 = &#123;11, 22, 33, s&#125;  # 正常</span><br><span class="line"> </span><br><span class="line">s = frozenset([1,2,3,4,5])</span><br><span class="line">print(s)  # frozenset(&#123;1, 2, 3, 4, 5&#125;)</span><br><span class="line">for el in s:</span><br><span class="line">    print(el)  # 1 2 3 4 5</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;set中的元素：可hash(int, str, tuple, bool)，不重复，底层存储无序&lt;/li&gt;
&lt;li&gt;set集合中的元素必须是可hash，但set本身是不可hash，是可变的数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;应用-重点&quot;&gt;&lt;a href=&quot;#应用-重点&quot; class=&quot;headerlink&quot; title=&quot;应用(重点)&quot;&gt;&lt;/a&gt;应用(重点)&lt;/h2&gt;&lt;p&gt;  利用set中元素不可重复，可给list去重&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lst = [11, 11, 22, 22, 33, 33, 44, 44, 55, 55]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lst = list(set(lst))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(lst)  # [33, 11, 44, 22, 55]  结果无序，但已去重&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Dictionary</title>
    <link href="https://bentech8.github.io/2025/03/16/python-dictionary/"/>
    <id>https://bentech8.github.io/2025/03/16/python-dictionary/</id>
    <published>2025-03-16T08:47:32.000Z</published>
    <updated>2025-03-16T08:54:10.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典的简单介绍"><a href="#字典的简单介绍" class="headerlink" title="字典的简单介绍"></a>字典的简单介绍</h2><ul><li>字典(dict)是python中唯一的一个映射类型。是以{ }括起来的键值对组成。</li><li>字典(dict)中key必须是不可变的，而value没有要求，可以保存任意类型的数据。</li></ul><h3 id="字典的保存原理："><a href="#字典的保存原理：" class="headerlink" title="字典的保存原理："></a>字典的保存原理：</h3><p>  字典在保存的时候，采用的是hash算法：根据key来计算出一个内存地址，然后将key-value保存在这个地址中。所以，在dict中存储的key-value中的key必须是可hash的。</p><p>  对于可hash，暂可以理解为可以改变的都是不可hash的，那么可哈希就意味着不可变，这个是为了能准确的计算内存地址而规定的。</p><ul><li>已知的可hash(不可变)的数据类型：int, str, tuple, bool</li><li>不可hash(可变)的数据类型：list, dict, set</li><li>dict保存的数据不是按照我们添加进去的顺序保存的，是按照hash表的顺序保存的，而hash表不是连续的。所以不能进行切片工作，只能通过key来获取dict中的数据。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18&#125;</span><br><span class="line"></span><br><span class="line">print(dic[name]) # Tom</span><br></pre></td></tr></table></figure><h2 id="字典的增删改查"><a href="#字典的增删改查" class="headerlink" title="字典的增删改查"></a>字典的增删改查</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><ul><li><p>dic[key] &#x3D; value</p><p> 若字典中无此key,则添加键值对，若字典中有此key,则为修改value内容</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;:18&#125;</span><br><span class="line"></span><br><span class="line">dic[&quot;hobby&quot;] = &quot;football&quot; </span><br><span class="line">print(dic)  # &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18, &quot;hobby&quot;: &quot;football&quot;&#125;  增加键-值对</span><br><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18&#125;</span><br><span class="line"></span><br><span class="line">dic[&quot;age&quot;] = 20</span><br><span class="line">print(dic) # &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 20&#125; 修改value内容</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>setdefault</li></ul><p>流程：</p><p>a) 判断key是否存在，如果存在，就不执行新增，返回key对应value内容</p><p>b) 如果不存在，执行新增，并返回key对应value内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18&#125;</span><br><span class="line"></span><br><span class="line">ret = dic.setdefault(&quot;hobby&quot;, &quot;football&quot;)</span><br><span class="line">print(dic)  # &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18, &quot;hobby&quot;: &quot;football&quot;&#125;</span><br><span class="line">print(ret)  # football</span><br><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18&#125;</span><br><span class="line"></span><br><span class="line">ret = dic.setdefault(&quot;name&quot;, &quot;Andy&quot;)</span><br><span class="line">print(dic)  # &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18&#125;</span><br><span class="line">print(ret)  # Tom</span><br></pre></td></tr></table></figure><p>当采用setdefault方法新增键值对时，若只提供key,则默认value为None</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18&#125;</span><br><span class="line"></span><br><span class="line">dic.setdefault(&quot;hobby&quot;)</span><br><span class="line">print(dic) # &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18, &quot;hobby&quot;: None&#125;</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><ul><li>pop</li></ul><p>根据key删除，有返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18, &quot;hobby&quot;: &quot;football&quot;&#125;</span><br><span class="line"></span><br><span class="line">ret = dic.pop(&quot;hobby&quot;)</span><br><span class="line">print(dic)  # &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18&#125;print(ret) # football</span><br></pre></td></tr></table></figure><ul><li>popitem</li></ul><p>随机删除(3.5以下为随机删除，3.5以上为删除末尾的，但python底层为随机删除)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18, &quot;hobby&quot;: &quot;football&quot;&#125;</span><br><span class="line"></span><br><span class="line">dic.popitem()</span><br><span class="line">print(dic)  # &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18&#125;</span><br></pre></td></tr></table></figure><ul><li>del</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">根据key删除</span><br><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18, &quot;hobby&quot;: &quot;football&quot;&#125;</span><br><span class="line"></span><br><span class="line">del dic[&quot;hobby&quot;]</span><br><span class="line">print(dic)  # &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18&#125;</span><br></pre></td></tr></table></figure><ul><li>clear</li></ul><p>清空字典</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18, &quot;hobby&quot;: &quot;football&quot;&#125;</span><br><span class="line"></span><br><span class="line">dic.clear()</span><br><span class="line">print(dic)  # &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><ul><li>dic[key] &#x3D; value</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18, &quot;hobby&quot;: &quot;football&quot;&#125;</span><br><span class="line"></span><br><span class="line">dic[&quot;age&quot;] = 20</span><br><span class="line">print(dic) # &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 20, &quot;hobby&quot;: &quot;football&quot;&#125;</span><br></pre></td></tr></table></figure><ul><li>update</li></ul><p> dic.update(dic1)：把dic1中的内容更新到dic中。如果key重名，则修改替换，如果不存在，则新增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18&#125;</span><br><span class="line">dic1 = &#123;&quot;name&quot;: &quot;Andy&quot;, &quot;hobby&quot;: &quot;football&quot;&#125;</span><br><span class="line"></span><br><span class="line">dic.update(dic1)</span><br><span class="line"></span><br><span class="line">print(dic) # &#123;&quot;name&quot;: &quot;Andy&quot;, &quot;age&quot;: 18, &quot;hobby&quot;: &quot;football&quot;&#125;</span><br><span class="line">print(dic1) # &#123;&quot;name&quot;: &quot;Andy&quot;, &quot;hobby&quot;: &quot;football&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><ul><li>print(dic[key])</li></ul><p>当key不存在时，报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18, &quot;hobby&quot;: &quot;football&quot;&#125;</span><br><span class="line"></span><br><span class="line">print(dic[&quot;name&quot;])  # Tom</span><br></pre></td></tr></table></figure><ul><li>get</li></ul><p>当key不存在时，返回None</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18, &quot;hobby&quot;: &quot;football&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(dic.get(&quot;name&quot;)) # Tom</span><br><span class="line">print(dic.get(&quot;addr&quot;)) # None</span><br></pre></td></tr></table></figure><ul><li>setdefault</li></ul><p>当key存在时，则返回value值，但当key不存在时，则新增key-value对。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18, &quot;hobby&quot;: &quot;football&quot;&#125;</span><br><span class="line"></span><br><span class="line">print(dic.setdefault(&quot;name&quot;)) # Tom</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="其他相关操作"><a href="#其他相关操作" class="headerlink" title="其他相关操作"></a>其他相关操作</h2><h3 id="dic-keys"><a href="#dic-keys" class="headerlink" title="dic.keys()"></a>dic.keys()</h3><p>遍历字典所有key:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for k in dic.keys():</span><br><span class="line">    print(k)</span><br><span class="line">for k in dic:</span><br><span class="line">    print(k）</span><br><span class="line">    print(dic[k]) </span><br></pre></td></tr></table></figure><h3 id="dic-values"><a href="#dic-values" class="headerlink" title="dic.values()"></a>dic.values()</h3><p>遍历字典所有value:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for v in dic.values():</span><br><span class="line">    print(v)</span><br></pre></td></tr></table></figure><h3 id="dic-items"><a href="#dic-items" class="headerlink" title="dic.items()"></a>dic.items()</h3><p>遍历字典的最好方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for k, v in dic.items():</span><br><span class="line">    print(k, v)</span><br></pre></td></tr></table></figure><h3 id="fromkeys"><a href="#fromkeys" class="headerlink" title="fromkeys"></a>fromkeys</h3><ul><li>fromkeys属于类dict的一个静态方法</li><li>创建新字典，不是在原有基础上增加键值对</li><li>如果value为可变数据数据。则所有key都可改动这个数据，一旦改动，所有的value跟着改变</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dic = dict.fromkeys([&quot;name_1&quot;, &quot;name_2&quot;], [11, 22, 33])</span><br><span class="line"></span><br><span class="line">print(dic) # &#123;&#x27;name_1&#x27;: [11, 22, 33], &#x27;name_2&#x27;: [11, 22, 33]&#125;</span><br><span class="line">dic = dict.fromkeys([``&quot;name_1&quot;``, ``&quot;name_2&quot;``], [11, 22, 33])` `dic[``&#x27;name_1&#x27;``].append(``&quot;hello&quot;``)` `print(dic) # &#123;``&#x27;name_1&#x27;``: [11, 22, 33, ``&#x27;hello&#x27;``], ``&#x27;name_2&#x27;``: [11, 22, 33, ``&#x27;hello&#x27;``]&#125;</span><br></pre></td></tr></table></figure><h2 id="dict在迭代过程中删除元素问题"><a href="#dict在迭代过程中删除元素问题" class="headerlink" title="dict在迭代过程中删除元素问题"></a>dict在迭代过程中删除元素问题</h2><h3 id="dict中元素在迭代过程中删除，则报错"><a href="#dict中元素在迭代过程中删除，则报错" class="headerlink" title="dict中元素在迭代过程中删除，则报错"></a>dict中元素在迭代过程中删除，则报错</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18&#125;</span><br><span class="line"></span><br><span class="line">for k in dic:</span><br><span class="line">    del dic[k]  # RuntimeError: dictionary changed size during iteration</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>  可以先把要删除的元素保存在一个list中，然后循环list，删除字典中元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;&#x27;k1&#x27;: 11, &quot;k2&quot;: 22, &quot;s1&quot;: 33, &quot;s2&quot;: 44&#125;</span><br><span class="line"></span><br><span class="line">lst = []</span><br><span class="line">for k in dic:</span><br><span class="line">    if &quot;k&quot; in k:</span><br><span class="line">        lst.append(k)</span><br><span class="line"></span><br><span class="line">for i in lst:</span><br><span class="line">    del dic[i]</span><br><span class="line"></span><br><span class="line">print(dic)  # &#123;&#x27;s1&#x27;: 33, &#x27;s2&#x27;: 44&#125;</span><br></pre></td></tr></table></figure><h2 id="字典嵌套"><a href="#字典嵌套" class="headerlink" title="字典嵌套"></a>字典嵌套</h2><p>字典里可以嵌套多层列表、字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">30</span>,    </span><br><span class="line">        <span class="string">&quot;hobby&quot;</span>: [<span class="string">&quot;football&quot;</span>, <span class="string">&quot;baseball&quot;</span>],</span><br><span class="line">        <span class="string">&quot;wife&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Andy&quot;</span>,</span><br><span class="line">                <span class="string">&quot;age&quot;</span>: <span class="string">&quot;28&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dic.get(<span class="string">&quot;wife&quot;</span>).get(<span class="string">&quot;name&quot;</span>)) <span class="comment"># Andy</span></span><br><span class="line"><span class="built_in">print</span>(dic[<span class="string">&quot;hobby&quot;</span>][<span class="number">1</span>])  <span class="comment"># baseball</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;字典的简单介绍&quot;&gt;&lt;a href=&quot;#字典的简单介绍&quot; class=&quot;headerlink&quot; title=&quot;字典的简单介绍&quot;&gt;&lt;/a&gt;字典的简单介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;字典(dict)是python中唯一的一个映射类型。是以{ }括起来的键值对组成。&lt;/li&gt;
&lt;li&gt;字典(dict)中key必须是不可变的，而value没有要求，可以保存任意类型的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;字典的保存原理：&quot;&gt;&lt;a href=&quot;#字典的保存原理：&quot; class=&quot;headerlink&quot; title=&quot;字典的保存原理：&quot;&gt;&lt;/a&gt;字典的保存原理：&lt;/h3&gt;&lt;p&gt;  字典在保存的时候，采用的是hash算法：根据key来计算出一个内存地址，然后将key-value保存在这个地址中。所以，在dict中存储的key-value中的key必须是可hash的。&lt;/p&gt;
&lt;p&gt;  对于可hash，暂可以理解为可以改变的都是不可hash的，那么可哈希就意味着不可变，这个是为了能准确的计算内存地址而规定的。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>List</title>
    <link href="https://bentech8.github.io/2025/03/16/python-list/"/>
    <id>https://bentech8.github.io/2025/03/16/python-list/</id>
    <published>2025-03-16T08:37:47.000Z</published>
    <updated>2025-03-16T08:54:21.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>  以[ ]括起来，每个元素用”,”隔开，且可以存放各种数据类型。</p><p>  列表相比于字符串，不仅可以存放不同的数据类型，而且可存放大量的数据。32位python可以存放：536870912个元素，64位可以存放：1152921504606846975个元素。</p><p>  列表是有序的(按照保存的顺序)，有索引，可以切片方便取值。</p><p>  列表属于可变数据类型。</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [&quot;python&quot;, &quot;java&quot;, &quot;c&quot;,  &quot;c++&quot;, [11, 22,33]]</span><br><span class="line"></span><br><span class="line">print(lst[0])  # python</span><br><span class="line">print(lst[4][0]) # 11</span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>  列表切片后得到还是列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33, 44, 55, 66]</span><br><span class="line"></span><br><span class="line">print(lst[0:3]) # [11, 22, 33] </span><br><span class="line">print(lst[1::2]) # [22, 44, 66]</span><br><span class="line">print(lst[2::-1]) # [33,22,11]</span><br></pre></td></tr></table></figure><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><p>1).增</p><ul><li><p>append</p><p>在列表末尾增加元素</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33, 44]lst.append(55)</span><br><span class="line">print(lst) # [11, 22, 33, 44, 55]</span><br></pre></td></tr></table></figure><ul><li>insert</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22,33]</span><br><span class="line">lst.insert(1, 55)</span><br><span class="line">print(lst) # [11, 55, 22, 33]</span><br></pre></td></tr></table></figure><ul><li><p>extend</p><p>迭代添加，增加的元素须为可迭代对象，且添加位置为末尾</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33]</span><br><span class="line">lst.extend([55, 66]) # [11, 22, 33, 55, 66]</span><br><span class="line">lst.extend(&quot;python&quot;) # [11, 22, 33, 55，66， &#x27;p&#x27;, &#x27;y&#x27;, &#x27;t&#x27;, &#x27;h&#x27;, &#x27;o&#x27;, &#x27;n&#x27;]</span><br><span class="line">lst.extend(44) # 报错</span><br></pre></td></tr></table></figure><p>2).删除</p><ul><li><p>pop</p><p>默认删除列表末尾元素，也可删除指定位置元素，前提得提供索引。该删除有返回值，返回值为删除的元素</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33,  44, 55]</span><br><span class="line">el = lst.pop() # 55</span><br><span class="line">print(lst) # [11, 22, 33, 44]</span><br><span class="line"></span><br><span class="line">lst.pop(2)</span><br><span class="line">print(lst) # [11, 22, 44]</span><br></pre></td></tr></table></figure><ul><li><p>remove</p><p> 根据元素内容进行删除，若列表中有多个相同的元素，则执行remove操作删除的是第一个元素</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33, 44]</span><br><span class="line"></span><br><span class="line">lst.remove(44)</span><br><span class="line">print(lst) # [11, 22, 33]</span><br></pre></td></tr></table></figure><ul><li><p>del</p><p>切片删除</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33, 44, 55, 66]</span><br><span class="line"></span><br><span class="line">del lst[0] </span><br><span class="line">print(lst) # [22, 33, 44, 55, 66]</span><br><span class="line"></span><br><span class="line">del[1:4:2] </span><br><span class="line">print(lst) # [22, 44, 66]</span><br></pre></td></tr></table></figure><ul><li><p>clear</p><p>清空列表</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33, 44, 55]</span><br><span class="line"></span><br><span class="line">lst.clear()</span><br><span class="line">print(lst) # []</span><br></pre></td></tr></table></figure><p> 3).修改</p><p>  指定索引修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33, 44]</span><br><span class="line"></span><br><span class="line">lst[2] = 55</span><br><span class="line">print(lst) # [11, 22, 55, 44]</span><br></pre></td></tr></table></figure><p>  根据切片修改，如果步长不是1，则修改的元素的个数与提供的元素个数须匹配。如果切片没有步长或者步长是1，则不用关心个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33, 44, 55]</span><br><span class="line"></span><br><span class="line">lst[1:4] = &#x27;编程&#x27;</span><br><span class="line">print(lst) # [11, &quot;编&quot;, &quot;程&quot;, 55]lst = [11, 22, 33, 44, 55, 66]lst[1:5:2] = &quot;编程&quot;print(lst) # [11, &quot;编&quot;, 33, &quot;程&quot;, 55, 66]</span><br></pre></td></tr></table></figure><p> 4).查询</p><p>  列表是一个可打迭代对象，所以可以进行for循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in lst:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><ul><li><p>count</p><p>查询某元素出现的次数</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 11, 44, 55, 66]</span><br><span class="line"></span><br><span class="line">c = lst.count(11)</span><br><span class="line">print(c) # 2</span><br></pre></td></tr></table></figure><ul><li><p>sort</p><p>默认按升序排列，若需降序排列，只需在括号内添加reverse&#x3D;True</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 44, 33, 22, 55]</span><br><span class="line"></span><br><span class="line">lst.sort()</span><br><span class="line">print(lst) # [11, 22, 33, 44, 55]</span><br><span class="line">lst.sort(reverse=True) </span><br><span class="line">print(lst) # [55, 44, 33, 22, 11]</span><br></pre></td></tr></table></figure><ul><li><p>reverse</p><p>翻转列表，无返回值</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 33, 22, 55, 44]</span><br><span class="line"></span><br><span class="line">lst.reverse()</span><br><span class="line">print(lst) # [44, 55, 22, 33, 11]</span><br></pre></td></tr></table></figure><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>  采用降维操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, [33, [&quot;python&quot;, 55]], 66]</span><br><span class="line"></span><br><span class="line">print(lst[1])  # 22</span><br><span class="line"></span><br><span class="line">print(lst[2][0]) # 33</span><br><span class="line"></span><br><span class="line">print(lst[2][1][0]) # p</span><br><span class="line"></span><br><span class="line">lst[2][1][0] = lst[2][1][0].replace(&quot;p&quot;, &quot;P&quot;)</span><br><span class="line"></span><br><span class="line">print(lst) # [11, 22, [33, [&#x27;Python&#x27;, 55]], 66]lst[2].append(77)print(lst) # [11, 22, [33, [&quot;Python&quot;, 55], 77], 66]</span><br></pre></td></tr></table></figure><h3 id="循环过程中删除列表元素问题"><a href="#循环过程中删除列表元素问题" class="headerlink" title="循环过程中删除列表元素问题"></a>循环过程中删除列表元素问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33, 44]</span><br><span class="line"></span><br><span class="line">for i in lst:</span><br><span class="line">    lst.remove(i)</span><br><span class="line">print(lst) # [22, 44]</span><br></pre></td></tr></table></figure><p>原因：</p><p>  在for的运行过程中，会有一个指针来记录当前循环的元素是哪个，一开始这个指针指向第0个，然后获取到第0个元素。紧接着删除第0个。这个时候，原来是第一个的元素会自动的变成第0个。然后指针向后移动一次，指向第1个元素。这时原来的1已经变成了0，也就不会被删除了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lst = [11, 22, 33, 44]</span><br><span class="line">del_lst = []</span><br><span class="line"></span><br><span class="line">for i in lst:</span><br><span class="line">    del_lst.append(i)</span><br><span class="line"></span><br><span class="line">for i in del_lst:</span><br><span class="line">    lst.remove(i)</span><br><span class="line"></span><br><span class="line">print(lst)  # []</span><br></pre></td></tr></table></figure><p> 注意：由于删除元素会导致元素的索引改变，所以容易出现问题。尽量不要在循环中直接删除元素。可以把要删除的元素添加到另一个列表中然后批量删除。</p><h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><ul><li>range(start, end, 步长)</li><li>获取元素的索引和元素</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [&quot;语文&quot;, &quot;数学&quot;, &quot;英语&quot;,&quot;高数&quot;,&quot;体育&quot;]</span><br><span class="line">for i in range(len(lst)):</span><br><span class="line">        print(i, lst[i])</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h2&gt;&lt;p&gt;  以[ ]括起来，每个元素用”,”隔开，且可以存放各种数据类型。&lt;/p&gt;
&lt;p&gt;  列表相比于字符串，不仅可以存放不同的数据类型，而且可存放大量的数据。32位python可以存放：536870912个元素，64位可以存放：1152921504606846975个元素。&lt;/p&gt;
&lt;p&gt;  列表是有序的(按照保存的顺序)，有索引，可以切片方便取值。&lt;/p&gt;
&lt;p&gt;  列表属于可变数据类型。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Tuple</title>
    <link href="https://bentech8.github.io/2025/03/16/python-tuple/"/>
    <id>https://bentech8.github.io/2025/03/16/python-tuple/</id>
    <published>2025-03-16T08:35:39.000Z</published>
    <updated>2025-03-16T09:23:35.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>俗称不可变的列表，又被称为只读列表</li><li>用小括号括起来，里面可放任何数据类型的数据</li><li>可查询，循环，切片(切片后得到的还是元组)，但不可修改元素</li><li>元组中如果只有一个元素，须添加一个逗号，否则就不是元组</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">t = (11, 22, 33, &#x27;python&#x27;, 44, 55, 66)</span><br><span class="line"></span><br><span class="line">print(t[0]) # 11</span><br><span class="line"></span><br><span class="line">print(t[1:3]) # (22, 33) </span><br><span class="line"></span><br><span class="line">for i in t:</span><br><span class="line">　　print(i) # 11 22 33 python 44 55 66</span><br><span class="line"></span><br><span class="line">t = (1,)</span><br><span class="line">print(type(t)) # &lt;class &#x27;tuple&#x27;&gt;</span><br><span class="line"></span><br><span class="line">t = (1)</span><br><span class="line">print(type(t)) # &lt;class &#x27;int&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>  元组的不可变指的是元组内第一层元素的内存地址不可变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t = (11, 22, 33, [], 44)</span><br><span class="line"></span><br><span class="line">t[3] = [55,]  # 报错</span><br><span class="line"></span><br><span class="line">t[3].append(55) # (11, 22, 33, [55], 44)</span><br></pre></td></tr></table></figure><p> 元组也有count, index, len等方法</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;俗称不可变的列表，又被称为只读列表&lt;/li&gt;
&lt;li&gt;用小括号括起来，里面可放任何数据类型的数据&lt;/li&gt;
&lt;li&gt;可查询，循环，切片(切片后得到的还是元组)，但不可修改元素&lt;/li&gt;
&lt;li&gt;元组中如果只有一个元素，须添加一个逗号，否则就不是元组&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;t = (11, 22, 33, &amp;#x27;python&amp;#x27;, 44, 55, 66)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(t[0]) # 11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(t[1:3]) # (22, 33) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for i in t:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　print(i) # 11 22 33 python 44 55 66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t = (1,)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(type(t)) # &amp;lt;class &amp;#x27;tuple&amp;#x27;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t = (1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(type(t)) # &amp;lt;class &amp;#x27;int&amp;#x27;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&quot;修改&quot;&gt;&lt;a href=&quot;#修改&quot; class=&quot;headerlink&quot; title=&quot;修改&quot;&gt;&lt;/a&gt;修改&lt;/h2&gt;&lt;p&gt;  元组的不可变指的是元组内第一层元素的内存地址不可变&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>String</title>
    <link href="https://bentech8.github.io/2025/03/16/python-string/"/>
    <id>https://bentech8.github.io/2025/03/16/python-string/</id>
    <published>2025-03-16T08:30:33.000Z</published>
    <updated>2025-03-16T09:23:21.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>把字符连成串，在python中用’, ‘’, ‘’’, “””引起来的内容被称为字符串</li><li>字符串是不可变对象，所有操作都是产生新字符串返回</li></ul><h2 id="切片和索引"><a href="#切片和索引" class="headerlink" title="切片和索引"></a>切片和索引</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p> 索引就是下标，下标从<strong>0</strong>开始</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#x27;python&#x27;</span><br><span class="line"></span><br><span class="line">print(s1[0]) # 获取第一个</span><br><span class="line">print(s1[6]) #越界，报错</span><br><span class="line">print(s1[-1]) # 获取倒数第一个</span><br><span class="line">print(s1[-2]) # 获取倒数第二个</span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><ul><li>使用下标来截取部分字符串的内容</li><li><strong>语法：str[start: end]</strong></li><li>规则：顾头不顾尾，从start 开始截取，截取到end位置，但不包括end</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s2 = &quot;python&quot;</span><br><span class="line">print(s2[0:3]) # pyt</span><br><span class="line">print(s2[4:6]) # on</span><br><span class="line">print(s2[3:]) # hon</span><br><span class="line">print(s2[-1:-3]) # 从-1获取到-5这样是获取不到任何结果的，默认从左往右数</span><br><span class="line">print(s2[-3:-1]) # ho</span><br><span class="line">print(s2[:]) # python</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>步长：</strong></p><p> 步长如果是正数，则从左往右取，如果是负数，则从右往左取。默认为1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s3 = &quot;&quot;python&quot;</span><br><span class="line"></span><br><span class="line">print(s3[1:5:2]) # yh</span><br><span class="line">print(s3[-1:-5:-1]) #noht</span><br><span class="line">print(s3[-2::-2]) # otp</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h3><ul><li>capitalize</li></ul><p><strong>功能</strong>：对第一个单词首字母大写，对于非第一个单词首字母进行检查，若大写则改为小写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;hello world&quot;</span><br><span class="line"></span><br><span class="line">print(s1.capitalize()) # Hello worlds2 = &quot;heLLo&quot;print(s2.capitalize()) # Hello </span><br></pre></td></tr></table></figure><ul><li>lower</li></ul><p><strong>功能</strong>：将字符串全部转换成小写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;HeLLo WoRld&quot;</span><br><span class="line"></span><br><span class="line">print(s1.lower()) # hello world</span><br></pre></td></tr></table></figure><ul><li>upper</li></ul><p><strong>功能</strong>：将字符串全部转换成大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;hello world&quot;</span><br><span class="line"></span><br><span class="line">print(s1.upper()) # HELLO WORLD</span><br></pre></td></tr></table></figure><ul><li>swapcase</li></ul><p><strong>功能</strong>：大小写互相转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;Hello World&quot;</span><br><span class="line"></span><br><span class="line">print(s1.swapcase()) # hELLO wORLD</span><br></pre></td></tr></table></figure><ul><li>casefold</li></ul><p><strong>功能</strong>：转换成小写</p><p>和lower的区别：lower()对某些字符支持不够好。casefold()对所有的字母都有效。比如东欧的一些字母。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s2 = &quot;БBß&quot; # 俄美德字符</span><br><span class="line"></span><br><span class="line">print(s2.casefold()) # 6bss</span><br><span class="line">print(s2.lower()) # 6bß</span><br></pre></td></tr></table></figure><ul><li>title</li></ul><p><strong>功能</strong>：每个被特殊字符隔开的字母首字母大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;hello world&quot;</span><br><span class="line">s2 = &quot;pyt你好hon&quot;</span><br><span class="line"></span><br><span class="line">print(s1.title()) # Hello World</span><br><span class="line">print(s2.title()) # Pyt你好Hon</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="切来切去"><a href="#切来切去" class="headerlink" title="切来切去"></a>切来切去</h3><ul><li>center</li></ul><p><strong>功能</strong>：居中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;python&quot;</span><br><span class="line"></span><br><span class="line">print(s1.center(10)) #  python  </span><br><span class="line">print(s1.center(10, &quot;*&quot;)) # **python**</span><br></pre></td></tr></table></figure><ul><li>expandtabs</li></ul><p><strong>功能</strong>：更改tab的长度，默认长度改为8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = “pyth\ton”</span><br><span class="line"></span><br><span class="line">print(s1.expandtabs()) # pyth    on</span><br></pre></td></tr></table></figure><ul><li>strip</li></ul><p><strong>功能</strong>：默认去掉左右两端的空白(空格，\n, \t)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;  \n  python  \t  &quot;</span><br><span class="line"></span><br><span class="line">print(s1.strip()) # pythons2 = &quot;hello world&quot;print(s2.lstrip(&quot;h&quot;).rstrip(&quot;d&quot;) # ello worl</span><br></pre></td></tr></table></figure><ul><li>lstrip</li></ul><p><strong>功能</strong>：默认去掉左端的空白(空格，\n, \t)</p><ul><li>rstrip</li></ul><p><strong>功能</strong>：默认去掉右端的空白(空格，\n, \t)</p><ul><li>replace</li></ul><p><strong>功能</strong>：字符串替换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;hello world&quot;</span><br><span class="line"></span><br><span class="line">ret = s1.replace(&quot;o&quot;, &quot;p&quot;) # hellp wprld</span><br><span class="line">ret = s1.replace(&quot;o&quot;, &quot;p&quot;,1) # hellp world</span><br></pre></td></tr></table></figure><ul><li>split</li></ul><p><strong>功能</strong>：字符串切割</p><ul><li>当括号内为无时即s.split()，此时根据空白切割</li><li>s.split(“|”, 1),根据字符串s中第一个”|”切割</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;python, java, c, c++, c#&quot;</span><br><span class="line"></span><br><span class="line">print(s1.split(&quot;,&quot;) # [&quot;python&quot;, &quot;java&quot;, &quot;c&quot;, &quot;c++&quot;, &quot;c#&quot;</span><br><span class="line">s = &quot;py|th|on&quot;</span><br><span class="line">print(s.split(&quot;|&quot;, 1))  # [&#x27;py&#x27;, &#x27;th|on&#x27;]</span><br><span class="line">print(int(&quot;  1  &quot;)) # 1 int()会自动去除左右两端的空白</span><br></pre></td></tr></table></figure><ul><li>join</li></ul><p><strong>功能</strong>：将列表名元素按给定字符连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;hello&quot;</span><br><span class="line"></span><br><span class="line">ss = &quot;_&quot;.join(s)</span><br><span class="line">print(ss)  # h_e_l_l_o</span><br><span class="line">lst = [&quot;hello&quot;, &quot;world&quot;]</span><br><span class="line"></span><br><span class="line">s = &quot;_&quot;.join(lst)</span><br><span class="line">print(s) # hello_world</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li>startswith</li></ul><p><strong>功能</strong>：判断是否以某个&#x2F;些字符开头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;Beautiful is better than ugly&quot;</span><br><span class="line"></span><br><span class="line">print(s1.startswith(&quot;Beautiful&quot;)) # True</span><br></pre></td></tr></table></figure><ul><li>endswith</li></ul><p><strong>功能</strong>：判数是否以某个&#x2F;些字符结尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;Beautiful is better than ugly&quot;</span><br><span class="line"></span><br><span class="line">print(s1.startswith(&quot;ugly&quot;)) # True</span><br></pre></td></tr></table></figure><ul><li>count</li></ul><p><strong>功能</strong>：查找某个&#x2F;些字符出现的次数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;python&quot;</span><br><span class="line"></span><br><span class="line">print(s1.count(&quot;h&quot;)) # 1print(&quot;hello&quot;.count(&quot;l&quot;, 0, 3)) # 1  判断&quot;hello&quot;[0:3]中&quot;l&quot;出现多少次</span><br></pre></td></tr></table></figure><ul><li>find</li></ul><p><strong>功能</strong>：查找某个&#x2F;些字符出现的位置，如果没有返回-1</p><p>如果查找的某个字符在字符串中出现多次，则查找所得的结果是第一个字符出现的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;python, java, c, c++, php&quot;</span><br><span class="line"></span><br><span class="line">print(s1.find(&quot;java&quot;)) # 8</span><br></pre></td></tr></table></figure><p>切片找：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;python, java, c, c++, php&quot;</span><br><span class="line"></span><br><span class="line">print(s1.find(&quot;java&quot;, 12, 25)) # -1 </span><br></pre></td></tr></table></figure><ul><li>rfind</li></ul><p>从字符串末尾开始查找</p><ul><li>index</li></ul><p><strong>功能</strong>：求索引位置，如果找不到索引，程序会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;python, java, c, c++, php&quot;</span><br><span class="line"></span><br><span class="line">print(s1.index(&quot;java&quot;)) # 8</span><br></pre></td></tr></table></figure><ul><li>rindex</li></ul><p>从字符串末尾开始查找</p><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><ul><li>format</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;我叫%s, 今年%d岁了， 我喜欢%s&quot;%(&quot;赛利亚&quot;， 18， &quot;玩&quot;))</span><br><span class="line"></span><br><span class="line">print(&quot;我叫&#123;&#125;, 今年&#123;&#125;岁了， 我喜欢&#123;&#125;&quot;.format(&quot;赛利亚&quot;， 18， &quot;玩&quot;))</span><br><span class="line"></span><br><span class="line">print(&quot;我叫&#123;0&#125;, 今年&#123;2&#125;岁了， 我喜欢&#123;1&#125;&quot;.format(&quot;赛利亚&quot;, &quot;玩&quot;, 18))</span><br><span class="line"></span><br><span class="line">print(&quot;我叫&#123;name&#125;, 今年&#123;age&#125;岁了， 我喜欢&#123;hobby&#125;&quot;.format(name=&quot;赛利亚&quot;, hobby=&quot;玩&quot;, age=18))</span><br></pre></td></tr></table></figure><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><ul><li>isalnum</li></ul><p><strong>功能</strong>：是否由字母和数字(int)组成，可以理解为包含isalpha和isnumeric的功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;123.16&quot;</span><br><span class="line">s2= &quot;abc&quot;</span><br><span class="line">s3 = &quot;_abc!@&quot;s4 = &quot;adfgsddfrd123456789壹贰叁肆伍陆柒一二三&quot;</span><br><span class="line"></span><br><span class="line">print(s1.isalnum()) # False</span><br><span class="line">print(s2.isalnum()) # True</span><br><span class="line">print(s3.isalnum()) # Falseprint(s4.isalnum()) # True</span><br></pre></td></tr></table></figure><ul><li>isalpha</li></ul><p><strong>功能</strong>：是否由字母组成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;123.16&quot;</span><br><span class="line">s2= &quot;abc&quot;</span><br><span class="line">s3 = &quot;_abc!@&quot;s4 = &quot;中国&quot;</span><br><span class="line"></span><br><span class="line">print(s1.isalpha()) # False</span><br><span class="line"></span><br><span class="line">print(s2.isalpha()) # True</span><br><span class="line"></span><br><span class="line">print(s3.isalpha()) # Falseprint(s4.isalpha()) # True</span><br></pre></td></tr></table></figure><ul><li>isdigit</li></ul><p><strong>功能</strong>：是否由阿拉伯数字(%d)组成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;123&quot;</span><br><span class="line">s2 = &quot;123.16&quot;</span><br><span class="line"></span><br><span class="line">print(s1.isdigit()) # True</span><br><span class="line">print(s2.isdigit()) # False</span><br></pre></td></tr></table></figure><ul><li><p>isdecimal</p></li><li><p>isnumeric</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &quot;123456789壹贰叁肆伍陆柒一二三四五&quot;</span><br><span class="line"></span><br><span class="line">print(a.isnumeric()) # True</span><br></pre></td></tr></table></figure><h3 id="计算字符串长度"><a href="#计算字符串长度" class="headerlink" title="计算字符串长度"></a>计算字符串长度</h3><ul><li>len</li></ul><p> len()是python的内置函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;python&quot;</span><br><span class="line"></span><br><span class="line">print(len(s1)) # 6</span><br></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><ul><li>可以使用for循环来遍历字符串中的每一个字符</li><li>可迭代对象：可以一个一个往外取值的对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;hello world&quot;</span><br><span class="line"></span><br><span class="line">for c in s1:    </span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;把字符连成串，在python中用’, ‘’, ‘’’, “””引起来的内容被称为字符串&lt;/li&gt;
&lt;li&gt;字符串是不可变对象，所有操作都是产生新字符串返回&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;切片和索引&quot;&gt;&lt;a href=&quot;#切片和索引&quot; class=&quot;headerlink&quot; title=&quot;切片和索引&quot;&gt;&lt;/a&gt;切片和索引&lt;/h2&gt;&lt;h3 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h3&gt;&lt;p&gt; 索引就是下标，下标从&lt;strong&gt;0&lt;/strong&gt;开始&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL调优</title>
    <link href="https://bentech8.github.io/2025/03/15/DB-MySQL%E8%B0%83%E4%BC%98/"/>
    <id>https://bentech8.github.io/2025/03/15/DB-MySQL%E8%B0%83%E4%BC%98/</id>
    <published>2025-03-15T15:05:40.000Z</published>
    <updated>2025-03-16T09:34:25.352Z</updated>
    
    
    
    
    <category term="MySQL" scheme="https://bentech8.github.io/categories/MySQL/"/>
    
    
    <category term="DataBase" scheme="https://bentech8.github.io/tags/DataBase/"/>
    
  </entry>
  
  <entry>
    <title>文件操作</title>
    <link href="https://bentech8.github.io/2025/03/15/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>https://bentech8.github.io/2025/03/15/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</id>
    <published>2025-03-15T14:53:59.000Z</published>
    <updated>2025-03-15T14:58:42.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;文件操作.txt&quot;, mode=&#x27;r&#x27;, encoding=&quot;utf-8&quot;)</span><br><span class="line">...</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><ul><li>open：表示打开一个文件</li><li>f：变量，操控文件操作.txt文件的句柄。为一个可迭代对象</li><li>f.flush()：刷新管道，在向文件里写内容时，管道里也会有数据，使用f.flush()可将管道里数据写入到文件里。</li><li>f.close()：关闭文件</li></ul><h3 id="写入模式（w）"><a href="#写入模式（w）" class="headerlink" title="写入模式（w）"></a>写入模式（w）</h3><ul><li>如果文件名不存在，则创建文件，然后再写入</li><li>如果文件名已存在，则先清空文件内容，然后再写入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;送别.txt&quot; mode=&quot;w&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">f.write(&quot;下马饮君酒， 问君何所之？\n&quot;)</span><br><span class="line">f.write(&quot;君言不得意， 归卧南山陲。\n&quot;)</span><br><span class="line">f.write(&quot;但去莫复问， 白云无尽时。\n&quot;)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="只读模式（r）"><a href="#只读模式（r）" class="headerlink" title="只读模式（r）"></a>只读模式（r）</h3><ul><li>read()</li></ul><p>1.read()：一次性全都读取出来。弊端：占内存。如果文件过大，容易导致内存崩溃。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;送别.txt&quot;, mode=&quot;r&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">content = f.read()</span><br><span class="line">print(content)f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">下马饮君酒， 问君何所之？</span><br><span class="line">君言不得意， 归卧南山陲。</span><br><span class="line">但去莫复问， 白云无尽时。</span><br></pre></td></tr></table></figure><p>2.read(n)：读取n个字符。需要注意的是，如果再次读取，那么会在当前位置继续去读，而不是从头读。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;送别.txt&quot;, mode=&quot;r&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">content = f.read(5)</span><br><span class="line">print(content)f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">下马饮君酒</span><br></pre></td></tr></table></figure><ul><li>readline()：一次读取一行数据。但每次读取出来的数据末尾都会有一个\n。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;送别.txt&quot;, mode=&quot;r&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">content = f.readline()</span><br><span class="line">print(content)f.close()</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">下马饮君酒， 问君何所之？</span><br></pre></td></tr></table></figure><ul><li>readlines()：一次性全都读取出来，返回的是列表，如果文件过大，容易出现内存崩溃的问题。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;送别.txt&quot;, mode=&quot;r&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">content = f.readlines()</span><br><span class="line">print(content)f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[&#x27;下马饮君酒， 问君何所之？\n&#x27;, &#x27;君言不得意， 归卧南山陲。\n&#x27;, &#x27;但去莫复问， 白云无尽时。&#x27;]</span><br></pre></td></tr></table></figure><ul><li>循环读取</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;送别.txt&quot;, mode=&quot;r&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">for line in f:</span><br><span class="line">    print(line.strip())</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">下马饮君酒， 问君何所之？</span><br><span class="line">君言不得意， 归卧南山陲。</span><br><span class="line">但去莫复问， 白云无尽时。</span><br></pre></td></tr></table></figure><h3 id="追加模式（a）"><a href="#追加模式（a）" class="headerlink" title="追加模式（a）"></a>追加模式（a）</h3><ul><li>在追加模式下，我们写入的内容会追加在文件的结尾</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;送别.txt&quot;, mode=&quot;a&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">f.write(&quot;- 王维&quot;)f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">下马饮君酒， 问君何所之？</span><br><span class="line">君言不得意， 归卧南山陲。</span><br><span class="line">但去莫复问， 白云无尽时。</span><br><span class="line">- 王维</span><br></pre></td></tr></table></figure><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><ul><li>如果文件夹命名为n或t时，此时\n，\t会被识别为转义字符，防止转义，可以路径前加”r”禁止转义。</li></ul><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>从磁盘根目录找文件</p><ul><li>Windows：E:\python\送别.txt</li><li>Linux：\user\bin\xxx</li></ul><h3 id="相对路径（用的多）"><a href="#相对路径（用的多）" class="headerlink" title="相对路径（用的多）"></a>相对路径（用的多）</h3><p>指相对于当前程序所在的文件夹</p><ul><li>例如文件在上一层文件下的送别.txt：..&#x2F;送别.txt</li></ul><h2 id="读写字节（rb，wb，ab）"><a href="#读写字节（rb，wb，ab）" class="headerlink" title="读写字节（rb，wb，ab）"></a>读写字节（rb，wb，ab）</h2><ul><li>b：bytes，读取和写入的是字节</li><li>应用：用来操作非文本文件（图片， 音频， 视频）</li><li>在这些模式下，不能选择encoding字符集</li></ul><h3 id="rb"><a href="#rb" class="headerlink" title="rb"></a>rb</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;送别.txt&quot;, mode=&quot;rb&quot;)</span><br><span class="line">content = f.read()</span><br><span class="line">print(content)f.close()</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">b&#x27;\xe4\xb8\x8b\xe9\xa9\xac\xe9\xa5\xae\xe5\x90\x9b\xe9\x85\x92\xef\xbc\x8c \xe9\x97\xae\xe5\x90\x9b\xe4\xbd\x95\xe6\x89\x80\xe4\xb9\x8b\xef\xbc\x9f\r\n\xe5\x90\x9b\xe8\xa8\x80\xe4\xb8\x8d\xe5\xbe\x97\xe6\x84\x8f\xef\xbc\x8c \xe5\xbd\x92\xe5\x8d\xa7\xe5\x8d\x97\xe5\xb1\xb1\xe9\x99\xb2\xe3\x80\x82\r\n\xe4\xbd\x86\xe5\x8e\xbb\xe8\x8e\xab\xe5\xa4\x8d\xe9\x97\xae\xef\xbc\x8c \xe7\x99\xbd\xe4\xba\x91\xe6\x97\xa0\xe5\xb0\xbd\xe6\x97\xb6\xe3\x80\x82&#x27;</span><br></pre></td></tr></table></figure><h3 id="wb"><a href="#wb" class="headerlink" title="wb"></a>wb</h3><p>  wb模式下，可以不指定打开文件的编码。但是在写文件的时候必须将字符串转化成utf-8的bytes数据，否则报错：TypeError: a bytes-like object is required, not ‘str’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;送别.txt&quot;, mode=&quot;wb&quot;)</span><br><span class="line">f.write(&quot;   五言古诗&quot;.encode(&quot;utf-8&quot;))f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">   五言古诗</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>将图片(长城.jpg)从C盘复制到D盘：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f1 = open(r&quot;c:\长城.jpg&quot;, mode=&quot;rb&quot;)</span><br><span class="line">f2 = open(r&quot;d:\长城.jpg&quot;, mode=&quot;wb&quot;)</span><br><span class="line"></span><br><span class="line">for line in f1:</span><br><span class="line">    f2.read(line)</span><br><span class="line"></span><br><span class="line">f1.close()</span><br><span class="line">f2.close()</span><br></pre></td></tr></table></figure><h2 id="扩展（-）"><a href="#扩展（-）" class="headerlink" title="扩展（+）"></a>扩展（+）</h2><h3 id="r-读写"><a href="#r-读写" class="headerlink" title="r+(读写)"></a>r+(读写)</h3><ul><li>先读后写（正常）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># place.txt:</span><br><span class="line"># 北京</span><br><span class="line"># 上海</span><br><span class="line"># 深圳</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(&quot;place.txt&quot;, mode=&quot;r+&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">content = f.read()</span><br><span class="line">f.write(&quot;广州&quot;)</span><br><span class="line">print(content)f.close()</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">北京</span><br><span class="line">上海</span><br><span class="line">深圳</span><br><span class="line"></span><br><span class="line"># place.txt:</span><br><span class="line"># 北京</span><br><span class="line"># 上海</span><br><span class="line"># 深圳</span><br><span class="line"># 广州</span><br></pre></td></tr></table></figure><p>注意：在r+模式下，不论读取多少内容，再次写入时，都是在末尾写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">送别.txt:</span><br><span class="line">下马饮 君酒，问君何所之?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(&quot;送别.txt&quot;, mode=&quot;r+&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">content = f.read(3)</span><br><span class="line">f.write(&quot;\n君言不得意，归卧南山陲。&quot;)</span><br><span class="line">print(content)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">下马饮</span><br><span class="line"></span><br><span class="line">送别.txt:</span><br><span class="line">下马饮君酒，问君何所之?</span><br><span class="line">君言不得意，归卧南山陲。</span><br></pre></td></tr></table></figure><ul><li><p>先写后读（错误示范）</p><p>如果直接写入的话，则在开头写入，覆盖开头的内容</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">place.txt:</span><br><span class="line">北京</span><br><span class="line">上海</span><br><span class="line">深圳</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(&quot;place.txt&quot;, mode=&quot;r+&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">f.write(&quot;广州&quot;)</span><br><span class="line">content = f.read()</span><br><span class="line">print(content)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">上海</span><br><span class="line">深圳</span><br><span class="line"></span><br><span class="line">place.txt:</span><br><span class="line">广州</span><br><span class="line">上海</span><br><span class="line">深圳</span><br></pre></td></tr></table></figure><h3 id="w-写读"><a href="#w-写读" class="headerlink" title="w+(写读)"></a>w+(写读)</h3><ul><li>如果文件存在，则先清空，再写入，如果文件不存在，则先创建文件，再写入。</li><li>写入东西后，光标在末尾，再次读取时，读取内容为空白</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;introduction.txt&quot;, mode=&quot;w+&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">f.write(&quot;你好，我叫赛利亚&quot;)</span><br><span class="line">content = f.read()</span><br><span class="line">print(content)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br></pre></td></tr></table></figure><p>a+(追加写读)</p><ul><li>不论光标在何处，写入时，都是在末尾写入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;introduction.txt&quot;, mode=&quot;a+&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">f.write(&quot;祝你玩的愉快！&quot;)</span><br><span class="line">content = f.read()</span><br><span class="line">print(content)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">introduction.txt:</span><br><span class="line">你好，我叫赛利亚祝你玩的愉快！</span><br></pre></td></tr></table></figure><h2 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h2><h3 id="seek-参数1-参数2"><a href="#seek-参数1-参数2" class="headerlink" title="seek(参数1, 参数2)"></a>seek(参数1, 参数2)</h3><ul><li>参数1：偏移量，表示移动多少个单位。</li><li>参数2：表示从什么位置进行偏移。0表示开头，1表示当前位置，2表示末尾。把光标移动至文件的开头：seek(0)；移至末尾：seek(0, 2)</li><li>功能：移动光标</li><li>特点：以字节为单位</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">introduction.txt:</span><br><span class="line">你好，我叫赛利亚</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(&quot;introduction.txt&quot;, mode=&quot;r&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">f.seek(3)</span><br><span class="line">content = f.read(3)</span><br><span class="line">print(content)f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">好，我</span><br></pre></td></tr></table></figure><h3 id="tell"><a href="#tell" class="headerlink" title="tell()"></a>tell()</h3><p>程序返回当前光标的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">introduction.txt:</span><br><span class="line">你好，我叫赛利亚</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(&quot;introduction.txt&quot;, mode=&quot;r&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">content = f.read(3)</span><br><span class="line">print(f.tell())  # 9f.close()</span><br></pre></td></tr></table></figure><h3 id="truncate"><a href="#truncate" class="headerlink" title="truncate()"></a>truncate()</h3><p>默认从开头截取到光标位置，后面的内容将会被删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">introduction.txt:</span><br><span class="line">你好，我叫赛利亚</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(&quot;introduction.txt&quot;, mode=&quot;r+&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">f.seek(3)</span><br><span class="line">f.truncate()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">introduction.txt:</span><br><span class="line">你</span><br></pre></td></tr></table></figure><p>truncate(n)：从开头载取到n位置，后面的内容将会被删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">introduction.txt:</span><br><span class="line">你好，我叫赛利亚</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(&quot;introduction.txt&quot;, mode=&quot;r+&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">f.truncate(3)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">introduction.txt:</span><br><span class="line">你</span><br></pre></td></tr></table></figure><h2 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h2><p>  文件操作没有直接修改文件功能，只能将文件中的内容读取到内存中，将信息修改完毕，然后将源文件删除，将新的文件的名字改成老文件的名字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">with open(&quot;唐诗&quot;, mode=&quot;r&quot;, encoding=&quot;utf-8&quot;) as f1,\</span><br><span class="line">    open(&quot;唐诗_副本&quot;, mode=&quot;w&quot;, encoding=&quot;utf-8&quot;) as f2:</span><br><span class="line">    for line in f1:</span><br><span class="line">        line = line.replace(&quot;?&quot;, &quot;。&quot;)</span><br><span class="line">        f2.write(line)</span><br><span class="line"></span><br><span class="line">os.remove(&quot;唐诗&quot;)  # 删除源文件</span><br><span class="line">os.rename(&quot;唐诗_副本&quot;, &quot;唐诗&quot;)  # 把副本改名为源文件</span><br></pre></td></tr></table></figure><h2 id="文件操作应用"><a href="#文件操作应用" class="headerlink" title="文件操作应用"></a>文件操作应用</h2><h3 id="文本文件的复制"><a href="#文本文件的复制" class="headerlink" title="文本文件的复制"></a>文本文件的复制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f1 = open(r&quot;C:\日记本.txt&quot;, mode=&quot;r&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">f2 = open(r&quot;D：\日记本.txt&quot;, mode=&quot;w&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line">for line in f1:</span><br><span class="line">    f2.write(line)</span><br><span class="line"></span><br><span class="line">f1.close()</span><br><span class="line">f2.close()</span><br></pre></td></tr></table></figure><h3 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">data.txt:</span><br><span class="line">序号，名称，价格，库存</span><br><span class="line">1，苹果，5，6000</span><br><span class="line">2，榴莲，20，5000</span><br><span class="line">3，香蕉，3，2000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with open(&quot;data.txt&quot;, mode=&quot;r&quot;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">    titles = f.readline().strip()</span><br><span class="line">    t_list = titles.split(&quot;,&quot;)</span><br><span class="line"></span><br><span class="line">    lst = []</span><br><span class="line">    for line in f:</span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        line = line.strip().split(&quot;,&quot;)</span><br><span class="line">        for i in range(len(line)):</span><br><span class="line">            dic[t_list[i]] = line[i]</span><br><span class="line">        lst.append(dic)</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[&#123;&#x27;序号&#x27;: &#x27;1&#x27;, &#x27;名称&#x27;: &#x27;苹果&#x27;, &#x27;价格&#x27;: &#x27;5&#x27;, &#x27;库存&#x27;: &#x27;6000&#x27;&#125;, &#123;&#x27;序号&#x27;: &#x27;2&#x27;, &#x27;名称&#x27;: &#x27;榴莲&#x27;, &#x27;价格&#x27;: &#x27;20&#x27;, &#x27;库存&#x27;: &#x27;5000&#x27;&#125;, &#123;&#x27;序号&#x27;: &#x27;3&#x27;, &#x27;名称&#x27;: &#x27;香蕉&#x27;, &#x27;价格&#x27;: &#x27;3&#x27;, &#x27;库存&#x27;: &#x27;2000&#x27;&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f = open(&amp;quot;文件操作.txt&amp;quot;, mode=&amp;#x27;r&amp;#x27;, encoding=&amp;quot;utf-8&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;open：表示打开一个文件&lt;/li&gt;
&lt;li&gt;f：变量，操控文件操作.txt文件的句柄。为一个可迭代对象&lt;/li&gt;
&lt;li&gt;f.flush()：刷新管道，在向文件里写内容时，管道里也会有数据，使用f.flush()可将管道里数据写入到文件里。&lt;/li&gt;
&lt;li&gt;f.close()：关闭文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;写入模式（w）&quot;&gt;&lt;a href=&quot;#写入模式（w）&quot; class=&quot;headerlink&quot; title=&quot;写入模式（w）&quot;&gt;&lt;/a&gt;写入模式（w）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果文件名不存在，则创建文件，然后再写入&lt;/li&gt;
&lt;li&gt;如果文件名已存在，则先清空文件内容，然后再写入&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>深浅拷贝</title>
    <link href="https://bentech8.github.io/2025/03/15/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://bentech8.github.io/2025/03/15/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2025-03-15T14:50:49.000Z</published>
    <updated>2025-03-15T14:52:46.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="&#x3D;"></a>&#x3D;</h2><ul><li>没有产生新对象，都是内存地址的赋值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [11, 22, 33, 44]</span><br><span class="line">lst2 = lst1print(id(lst1)) # 1916361712712print(id(lst2)) # 1916361712712</span><br><span class="line"></span><br><span class="line">lst1.append(&quot;hello&quot;)</span><br><span class="line">print(lst1)  # [11, 22, 33, 44, &#x27;hello&#x27;]</span><br><span class="line">print(lst2)  # [11, 22, 33, 44, &#x27;hello&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dic1 = &#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18&#125;</span><br><span class="line">dic2 = dic1</span><br><span class="line">print(id(dic1)) # 2020711820888print(id(dic2)) # 2020711820888</span><br><span class="line">dic1[&quot;hobby&quot;]  = &quot;football&quot;</span><br><span class="line"></span><br><span class="line">print(dic1)  # &#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 18, &#x27;hobby&#x27;: &#x27;football&#x27;&#125;</span><br><span class="line">print(dic2)  # &#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 18, &#x27;hobby&#x27;: &#x27;football&#x27;&#125;</span><br></pre></td></tr></table></figure><p>  对于list，set，dict来说，变量1 &#x3D; 变量2，其实就相当于把变量2内容的内存地址交给变量1，并不是复制一份内容，所以一变，都变。 </p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><ul><li>优点：省内存</li><li>缺点：只拷贝第一层内容</li><li>浅拷贝方法：copy()，对于list，还有lst[:]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [11, 22, 33]</span><br><span class="line">lst2 = lst1[:]</span><br><span class="line"></span><br><span class="line">print(id(lst1))  # 1744651035720</span><br><span class="line">print(id(lst2))  # 1744651035848</span><br><span class="line"></span><br><span class="line">lst1.append(44)</span><br><span class="line"></span><br><span class="line">print(lst1) # [11, 22, 33, 44]</span><br><span class="line">print(lst2) # [11, 22, 33]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [11, 22, 33, [44, 55]]</span><br><span class="line">lst2 = lst1.copy()</span><br><span class="line"></span><br><span class="line">print(id(lst1))  # 2081315824712</span><br><span class="line">print(id(lst2))  # 2081316649864</span><br><span class="line"></span><br><span class="line">lst1[3].append(&quot;hello&quot;)</span><br><span class="line"></span><br><span class="line">print(lst1) # [11, 22, 33, [44, 55, &#x27;hello&#x27;]]</span><br><span class="line">print(lst2) # [11, 22, 33, [44, 55, &#x27;hello&#x27;]]</span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><ul><li><p>深拷贝把内部元素完全进行拷贝复制。</p><p>深拷贝方法：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import copy</span><br><span class="line"></span><br><span class="line">s2 = copy.deepcopy(s1)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import copy</span><br><span class="line"></span><br><span class="line">lst1 = [11, 22, 33, [44, 55]]</span><br><span class="line">lst2 = copy.deepcopy(lst1)</span><br><span class="line"></span><br><span class="line">print(id(lst1))  # 1236356428872</span><br><span class="line">print(id(lst2))  # 1236356430152</span><br><span class="line"></span><br><span class="line">lst1[3].append(&quot;hello&quot;)</span><br><span class="line"></span><br><span class="line">print(lst1) # [11, 22, 33, [44, 55, &#x27;hello&#x27;]]</span><br><span class="line">print(lst2) # [11, 22, 33, [44, 55]]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x3D;&quot;&gt;&lt;/a&gt;&amp;#x3D;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;没有产生新对象，都是内存地址的赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lst1 = [11, 22, 33, 44]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lst2 = lst1print(id(lst1)) # 1916361712712print(id(lst2)) # 1916361712712&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lst1.append(&amp;quot;hello&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(lst1)  # [11, 22, 33, 44, &amp;#x27;hello&amp;#x27;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(lst2)  # [11, 22, 33, 44, &amp;#x27;hello&amp;#x27;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dic1 = &amp;#123;&amp;quot;name&amp;quot;: &amp;quot;Tom&amp;quot;, &amp;quot;age&amp;quot;: 18&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dic2 = dic1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(id(dic1)) # 2020711820888print(id(dic2)) # 2020711820888&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dic1[&amp;quot;hobby&amp;quot;]  = &amp;quot;football&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(dic1)  # &amp;#123;&amp;#x27;name&amp;#x27;: &amp;#x27;Tom&amp;#x27;, &amp;#x27;age&amp;#x27;: 18, &amp;#x27;hobby&amp;#x27;: &amp;#x27;football&amp;#x27;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(dic2)  # &amp;#123;&amp;#x27;name&amp;#x27;: &amp;#x27;Tom&amp;#x27;, &amp;#x27;age&amp;#x27;: 18, &amp;#x27;hobby&amp;#x27;: &amp;#x27;football&amp;#x27;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;  对于list，set，dict来说，变量1 &amp;#x3D; 变量2，其实就相当于把变量2内容的内存地址交给变量1，并不是复制一份内容，所以一变，都变。 &lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>小数据池</title>
    <link href="https://bentech8.github.io/2025/03/15/%E5%B0%8F%E6%95%B0%E6%8D%AE%E6%B1%A0/"/>
    <id>https://bentech8.github.io/2025/03/15/%E5%B0%8F%E6%95%B0%E6%8D%AE%E6%B1%A0/</id>
    <published>2025-03-15T14:45:42.000Z</published>
    <updated>2025-03-15T14:49:19.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小数据池"><a href="#小数据池" class="headerlink" title="小数据池"></a>小数据池</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>  python程序是由代码块构成的，一个代码块的文本作为pythont程序执行的单元</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">官方文档：</span><br><span class="line">     A Python program is constructed from code blocks. A block is a piece of Python program text that is executed as a unit. The following are blocks: a module, a function body, and a class definition. Each command typed interactively is a block. A script file (a file given as standard input to the interpreter or specified as a command line argument to the interpreter) is a code block. A script command (a command specified on the interpreter command line with the ‘-c‘ option) is a code block. The string argument passed to the built-in functions eval() and exec() is a code block. A code block is executed in an execution frame. A frame contains some administrative information (used for debugging) and determines where and how execution continues after the code block’s execution has completed.</span><br></pre></td></tr></table></figure><p>一个代码块：</p><ul><li>一个模块(module)</li><li>一个函数(function)</li><li>一个类(class)</li><li>每一个command命令</li><li>一个文件(file)</li><li>eval()</li><li>exec()</li></ul><h3 id="id"><a href="#id" class="headerlink" title="id()"></a>id()</h3><p>  通过id()可以查看到一个变量表示的值在内存中的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;hello&quot;</span><br><span class="line">print(id(s)) # 2305859175064</span><br></pre></td></tr></table></figure><h3 id="is-和-区别"><a href="#is-和-区别" class="headerlink" title="is 和 &#x3D;&#x3D; 区别"></a>is 和 &#x3D;&#x3D; 区别</h3><ul><li><p>&#x3D;&#x3D;：判断左右两端的值是否相等</p></li><li><p>is：判断左右两端内容的内存地址是否一致。如果返回True,那可以确定这两个变量使用的是同一个对象</p><p>如果内存地址相同，则值一定是相等的，如果值相等，则不一定同一对象</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a == b)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1000</span></span><br><span class="line">b = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment"># False 在command命令下为False, 在.py文件中（例如pycharm中）得到的结果为True。（详情见下面）</span></span><br></pre></td></tr></table></figure><h3 id="小数据池-1"><a href="#小数据池-1" class="headerlink" title="小数据池"></a>小数据池</h3><ul><li>一种缓存机制，也被称为驻留机制。各大编程语言中都有类似的东西。网上搜索常量池，小数据池指的是同一个内容</li><li>小数据池只针对：int(整数)， string(字符串)， bool(布尔值)。其他数据类型不存在驻留机制</li></ul><p>优点：能够提高字符串、整数的处理速度。省略了创建对象的过程。</p><p>缺点：在”池”中创建或者插入新的内容会花费更多的时间。</p><p>1.整数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">官方文档：</span><br><span class="line">    The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you actually just get back a reference to the existing object. So it should be possible to change the value of 1. I suspect the behavior of Python in this case is undefined.</span><br></pre></td></tr></table></figure><ul><li>在python中，-5~256会被加到小数据池中，每次使用都是同一个对象</li><li>在使用的时候，内存中只会创建一个该数据的对象，保存在小数据池中。当使用的时候直接从小数据池中获取对象的内存引用，而不需要重新创建一个新的数据，这样会节省更多的内存区域。</li></ul><p>2.字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Incomputer science, string interning is a method of storing only onecopy of each distinct string value, which must be immutable. Interning strings makes </span><br><span class="line">some stringprocessing tasks more time- or space-efficient at the cost of requiring moretime when the string is created or interned. The distinct values are</span><br><span class="line"> stored ina string intern pool. –引⾃自维基百科</span><br></pre></td></tr></table></figure><ul><li>如果字符串的长度是0或者1，都会默认进行缓存。（中文字符无效）</li><li>字符串长度大于1，但是字符串中只包含数字，字母，下划线时会被缓存。</li><li>用乘法得到的字符串：1）乘数为1，仅包含数字，字母，下划线时会被缓存。如果包含其他字符，而长度&lt;&#x3D; 1也会被驻存(中文字符除外)。2）乘数大于1，仅包含数字，字母，下划线时会被缓存，但字符串长度不能大于20</li><li>指定驻留：可以通过sys模块中的intern()函数来指定要驻留的内容。(详情见sys模块相关内容)</li></ul><h3 id="代码块缓存机制"><a href="#代码块缓存机制" class="headerlink" title="代码块缓存机制"></a>代码块缓存机制</h3><p>  在代码块内缓存机制是不一样的：</p><ul><li>在执行同一个代码块的初始化对象的命令时，会检查其值是否已经存在，如果存在，会将其重用。换句话说：执行同一个代码块时，遇到初始化对象的命令时，他会将初始化的这个变量与值存储在一个字典中，再遇到新的初始化对象命令时，先在字典中查询其值是否已经存在，如果存在，那么它会重复使用这个字典中的之前的这个值。即两变量指向同一个内存地址。</li><li>如果是不同的代码块，则判断这两个变量是否满足小数据池的数据，如果满足，则两变量指向同一个地址。如果不满足，则得到两个不同的对象，即两变量指向的是不同的内存地址。</li></ul><p>注意：对于同一个代码块，只针对单纯创建变量，才会采用缓存机制，对于创建变量并同时做相关运算，则无。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = 1000</span><br><span class="line">b = 1000</span><br><span class="line"></span><br><span class="line">print(id(a)) # 2135225709680</span><br><span class="line">print(id(b)) # 2135225709680</span><br><span class="line">print(a is b)  # True  .py文件运行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = 1000</span><br><span class="line">b = 10*100</span><br><span class="line"></span><br><span class="line">print(id(a)) # 1925536396400</span><br><span class="line">print(id(b)) # 1925536643952</span><br><span class="line">print(a is b) # False  .py文件运行</span><br></pre></td></tr></table></figure><h3 id="小数据池与代码块缓存机制区别与联系"><a href="#小数据池与代码块缓存机制区别与联系" class="headerlink" title="小数据池与代码块缓存机制区别与联系"></a>小数据池与代码块缓存机制区别与联系</h3><ul><li>小数据池与代码块对缓存数据类型要求不一致，代码块只针对单纯创建变量有效，而对整数大小，字符串字符要求及长度无限制。</li><li>对于代码块缓存机制：如果不满足代码块缓存机制，则判断是否满足小数据池数据，如果满足，则采用小数据池缓存机制。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = 5*5</span><br><span class="line">b = 25</span><br><span class="line"></span><br><span class="line">print(id(a))  # 1592487712</span><br><span class="line">print(id(b))  # 1592487712</span><br><span class="line"></span><br><span class="line">print(a is b)  # True  .py文件运行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = &quot;Incomputer science, string interning is a method of storing only onecopy of each distinct string value&quot;</span><br><span class="line">b = &quot;Incomputer science, string interning is a method of storing only onecopy of each distinct string value&quot;</span><br><span class="line"></span><br><span class="line">print(id(a)) # 2926961023256</span><br><span class="line">print(id(b)) # 2926961023256</span><br><span class="line"></span><br><span class="line">print(a is b) # True  .py文件运行</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;小数据池&quot;&gt;&lt;a href=&quot;#小数据池&quot; class=&quot;headerlink&quot; title=&quot;小数据池&quot;&gt;&lt;/a&gt;小数据池&lt;/h2&gt;&lt;h3 id=&quot;代码块&quot;&gt;&lt;a href=&quot;#代码块&quot; class=&quot;headerlink&quot; title=&quot;代码块&quot;&gt;&lt;/a&gt;代码块&lt;/h3&gt;&lt;p&gt;  python程序是由代码块构成的，一个代码块的文本作为pythont程序执行的单元&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;官方文档：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     A Python program is constructed from code blocks. A block is a piece of Python program text that is executed as a unit. The following are blocks: a module, a function body, and a class definition. Each command typed interactively is a block. A script file (a file given as standard input to the interpreter or specified as a command line argument to the interpreter) is a code block. A script command (a command specified on the interpreter command line with the ‘-c‘ option) is a code block. The string argument passed to the built-in functions eval() and exec() is a code block. A code block is executed in an execution frame. A frame contains some administrative information (used for debugging) and determines where and how execution continues after the code block’s execution has completed.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一个代码块：&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>编码</title>
    <link href="https://bentech8.github.io/2025/03/15/%E7%BC%96%E7%A0%81/"/>
    <id>https://bentech8.github.io/2025/03/15/%E7%BC%96%E7%A0%81/</id>
    <published>2025-03-15T14:41:46.000Z</published>
    <updated>2025-03-15T14:43:21.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编码种类"><a href="#编码种类" class="headerlink" title="编码种类"></a>编码种类</h2><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><ul><li>基于拉丁字母的一套电脑编码系统</li><li>其最多只能用8位来表示(一字节)</li></ul><table><thead><tr><th><strong>Bin(二进制)</strong></th><th><strong>Dec(十进制)</strong></th><th><strong>缩写&#x2F;字符</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>01000001</td><td>65</td><td>A</td><td>大写字母A</td></tr><tr><td>01100001</td><td>97</td><td>a</td><td>小写字母a</td></tr></tbody></table><h3 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h3><ul><li>国标码(GB2312)的扩展码</li><li>一个字符占用16bit，两字节</li><li>最多可容纳2**16 &#x3D; 65536字符</li><li>程序无法跨平台使用</li></ul><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><ul><li>万国码，目的把全世界所有国家的文字信息进行编码</li><li>一个字符占用32位，四字节</li></ul><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><ul><li>可变长度的编码</li><li>每个字符占用的字节数不定，根据文字内容进行编码。</li></ul><p>不同字符占用字节数：</p><ul><li>英文：1字节</li><li>欧洲文字：2字节</li><li>中文：3字节</li></ul><h2 id="单位转换"><a href="#单位转换" class="headerlink" title="单位转换"></a>单位转换</h2><ul><li>8bit &#x3D; 1 byte</li><li>1024byte &#x3D; 1KB</li><li>1024KB &#x3D; 1MB</li><li>1024MB &#x3D; 1GB</li><li>1024GB &#x3D; 1TB</li><li>1024TB &#x3D; 1PB</li><li>1024PB &#x3D; 1EB</li><li>1024EB &#x3D; 1ZB</li><li>1024ZB &#x3D; 1YB</li><li>1024YB &#x3D; 1NB</li><li>1024NB &#x3D; 1DB</li></ul><h2 id="编码和解码"><a href="#编码和解码" class="headerlink" title="编码和解码"></a>编码和解码</h2><ul><li>python2中默认使用的是ASCII码。所以不支持中文。如果需要在Python2中更改编码。需要在文件的开始编写：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># _*_ encoding:utf-8 _*_</span><br></pre></td></tr></table></figure><ul><li><p>python3中，内存中使用的是unicode码。</p><p>在python3内存中，在程序运行阶段，使用的是unicode编码。因为unicode是万国码。什么内容都可以进行显示。那么在数据传输和存储时由于unicode比较浪费空间和资源。需要把unicode转存成UTF-8或GBK进行存储。</p><p>编码之后的数据是<strong>bytes</strong>类型的数据。</p></li></ul><h3 id="bytes的表现形式："><a href="#bytes的表现形式：" class="headerlink" title="bytes的表现形式："></a>bytes的表现形式：</h3><ul><li>英文：英文的表现形式和字符串相差不大，前面多个”b”</li><li>中文：中文编码之后的结果根据编码的不同，编码结果也不同，一个中文的UTF-8编码是3个字节，一个GBK的中文编码是2个字节。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &quot;hello&quot;</span><br><span class="line">b = &quot;中&quot;</span><br><span class="line"></span><br><span class="line">print(a.encode(&quot;utf-8&quot;))  # b&#x27;hello&#x27;</span><br><span class="line">print(b.encode(&quot;utf-8&quot;))  # b&#x27;\xe4\xb8\xad&#x27;</span><br><span class="line">print(b.encode(&quot;gbk&quot;))    # b&#x27;\xd6\xd0&#x27;</span><br></pre></td></tr></table></figure><h3 id="编码和解码-1"><a href="#编码和解码-1" class="headerlink" title="编码和解码"></a>编码和解码</h3><ul><li><p>**encode()：**编码</p></li><li><p>**decode()：**解码</p><p>以何种编码编码，就须以该种编码解码。否则，解码不成功，得不到想要的内容。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = &quot;编码&quot;</span><br><span class="line">print(a.encode(&quot;utf-8&quot;)) # b&#x27;\xe7\xbc\x96\xe7\xa0\x81&#x27;</span><br><span class="line"></span><br><span class="line">b = b&#x27;\xe7\xbc\x96\xe7\xa0\x81&#x27;</span><br><span class="line">print(b.decode(&quot;utf-8&quot;))  # 编码</span><br></pre></td></tr></table></figure><p>  不同编码之间的转换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># GBK 转换成 UTF-8</span><br><span class="line">s = &quot;我是文字&quot;</span><br><span class="line">bs = s.encode(&quot;gbk&quot;)</span><br><span class="line"></span><br><span class="line"># 把GBK转换成unicode，也就是解码</span><br><span class="line">s = bs.decode(&quot;gbk&quot;)</span><br><span class="line"></span><br><span class="line"># 重新编码成UTF-8</span><br><span class="line">bss = s.encode(&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line">print(bss)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;编码种类&quot;&gt;&lt;a href=&quot;#编码种类&quot; class=&quot;headerlink&quot; title=&quot;编码种类&quot;&gt;&lt;/a&gt;编码种类&lt;/h2&gt;&lt;h3 id=&quot;ASCII&quot;&gt;&lt;a href=&quot;#ASCII&quot; class=&quot;headerlink&quot; title=&quot;ASCII&quot;&gt;&lt;/a&gt;ASCII&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基于拉丁字母的一套电脑编码系统&lt;/li&gt;
&lt;li&gt;其最多只能用8位来表示(一字节)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Bin(二进制)&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Dec(十进制)&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;缩写&amp;#x2F;字符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;解释&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;01000001&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;大写字母A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;01100001&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;小写字母a&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;GBK&quot;&gt;&lt;a href=&quot;#GBK&quot; class=&quot;headerlink&quot; title=&quot;GBK&quot;&gt;&lt;/a&gt;GBK&lt;/h3&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="https://bentech8.github.io/2025/03/15/python%E5%9F%BA%E7%A1%80/"/>
    <id>https://bentech8.github.io/2025/03/15/python%E5%9F%BA%E7%A1%80/</id>
    <published>2025-03-15T14:35:14.000Z</published>
    <updated>2025-03-15T14:39:16.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python简介"><a href="#python简介" class="headerlink" title="python简介"></a>python简介</h2><p> python是一门动态、解释型、强类型高级开发编程语言</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p> 把程序运行过程中产生的值存储起来，方便后面程序调用</p><h3 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h3><ul><li>由数字，字母，下划线组成</li><li>不能数字开头，更不能是纯数字</li><li>不能是python的关键字</li><li>不要太长</li><li>要有意义</li><li>区分大小写</li><li>不要用中文</li></ul><p>推荐：1）驼峰体：每个单词的首字母大写</p><p>​      2）下划线：单词用下划线连接</p><h2 id="基本数据类型-int-bool"><a href="#基本数据类型-int-bool" class="headerlink" title="基本数据类型(int, bool)"></a>基本数据类型(int, bool)</h2><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><ul><li>操作：+，-，*，&#x2F;，%，&#x2F;&#x2F;</li><li>**xxx.bit_length()：**返回xxx的二进制长度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a.bit_length()) <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><h3 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h3><ul><li>True</li><li>False</li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>bool —&gt; int</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bs = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(bs)) <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">int</span>(bs)</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x)) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li>int —&gt; bool</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(-<span class="number">1</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>结论：</p><p>a) 把x转换成y类型：y(x)</p><p>b) 空的东西都是False， 非空的东西是True</p><p>c) False：0，’’，[]， {}，set()，tuple()，None(真空)</p><h2 id="用户交互"><a href="#用户交互" class="headerlink" title="用户交互"></a>用户交互</h2><ul><li>变量 &#x3D; input(“提示语”)</li><li>input默认得到str类型数据</li></ul><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><ul><li>%s：字符串占位符，任何数据类型都适用</li><li>%d：数字占位符，映变量类型必须为int，否则程序报错</li><li>在字符串如果使用了%s这样的占位符，那么所有的%都将变成占位符，此时需要使用%%来表示字符串的%</li><li>如果字符串没有使用%s，%d占位，则无需使用%%来表示字符串的%</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我叫%s, 今年%s岁&quot;</span> % (<span class="string">&quot;赛利亚&quot;</span>, <span class="number">56</span>))  <span class="comment"># 我叫赛利亚, 今年56岁</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我叫%s, 我已经拥有了全国0.01%%的财产了&quot;</span> % (<span class="string">&quot;赛利亚&quot;</span>)) <span class="comment"># 我叫赛利亚, 我已经拥有了全国0.01%的财产了</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我叫赛利亚， 我已经学习了2%的python了&quot;</span>) <span class="comment"># 我叫赛利亚， 我已经学习了2%的python了</span></span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>and：并且，左右两端都为真，结果为真，否则为假</li><li>or：或者，左右两端有一个为真，结果为真，左右两端都为假，则结果为假</li><li>not：取反，非真即假，非假即真</li></ul><h3 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h3><ul><li>() —&gt; not —&gt; and —&gt; or</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(3 &gt; 2 and 4 &gt; 6 and 5 &lt; 7 and 7 &gt; 8) # False</span><br><span class="line">print(4 &gt; 6 or 7 &lt; 5 or 5 &gt; 8 or 7 &gt; 9 or 5 &gt; 3) # True</span><br></pre></td></tr></table></figure><h3 id="当左右两端是数字时"><a href="#当左右两端是数字时" class="headerlink" title="当左右两端是数字时"></a>当左右两端是数字时</h3><ul><li>x or y，若x为真，则值为x，否则为y</li><li>x and y，与or相反</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(3 and 0 or 5 and 4 or 6 and 8) # 4</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>单行注释：#</li><li>多行注释：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;多行注释</span><br><span class="line">写多少行都行</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><h3 id="if结构："><a href="#if结构：" class="headerlink" title="if结构："></a>if结构：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if 条件：</span><br><span class="line">    if-语句块</span><br></pre></td></tr></table></figure><h3 id="if-else结构："><a href="#if-else结构：" class="headerlink" title="if-else结构："></a>if-else结构：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if 条件：</span><br><span class="line">    if-语句块</span><br><span class="line">else:</span><br><span class="line">    else-语句块</span><br></pre></td></tr></table></figure><h3 id="if-elif-else结构："><a href="#if-elif-else结构：" class="headerlink" title="if-elif-else结构："></a>if-elif-else结构：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if 条件：</span><br><span class="line">    if-语句块</span><br><span class="line">elif 条件：</span><br><span class="line">    elif-语句块</span><br><span class="line">...</span><br><span class="line">else:</span><br><span class="line">    else-语句块</span><br></pre></td></tr></table></figure><p>if语句里可以嵌套if语句，但不要超过3层，最多5层。</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while 结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while 结构：</span><br><span class="line">    while语句块(循环体)</span><br></pre></td></tr></table></figure><p> 执行顺序：判断条件是否为真，如果为真则执行循环体，否则跳出循环。执行完循环体之后再次判断条件是否为真，直到为假为止。</p><p>break and continue</p><ul><li>break：结束本层循环</li><li>continue：结束本层本次循环，继续执行下一次循环</li></ul><p>while-else结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while 条件：</span><br><span class="line">    while语句块(循环体)</span><br><span class="line">else:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><ul><li>执行顺序：当条件成立时执行循环体，当条件不成立时执行else里的代码。</li><li>如果循环是通过break退出的，那么while后的else将不会执行，只有在while条件判断是假的时候才会执行这个else。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;python简介&quot;&gt;&lt;a href=&quot;#python简介&quot; class=&quot;headerlink&quot; title=&quot;python简介&quot;&gt;&lt;/a&gt;python简介&lt;/h2&gt;&lt;p&gt; python是一门动态、解释型、强类型高级开发编程语言&lt;/p&gt;
&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt; 把程序运行过程中产生的值存储起来，方便后面程序调用&lt;/p&gt;
&lt;h3 id=&quot;变量的命名规范&quot;&gt;&lt;a href=&quot;#变量的命名规范&quot; class=&quot;headerlink&quot; title=&quot;变量的命名规范&quot;&gt;&lt;/a&gt;变量的命名规范&lt;/h3&gt;</summary>
    
    
    
    <category term="Python" scheme="https://bentech8.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://bentech8.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>argo-rollouts</title>
    <link href="https://bentech8.github.io/2025/03/14/argo-rollouts/"/>
    <id>https://bentech8.github.io/2025/03/14/argo-rollouts/</id>
    <published>2025-03-14T07:39:17.000Z</published>
    <updated>2025-03-15T15:40:52.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Argo-Rollouts简介"><a href="#Argo-Rollouts简介" class="headerlink" title="Argo Rollouts简介"></a>Argo Rollouts简介</h2><p>Argo Rollouts是一个Kubernetes Operator实现，它为Kubernetes提供更加高级的部署能力，如蓝绿、金丝雀、金丝雀分析、实验和渐进式交付功能，为云原生应用和服务实现自动化、基于GitOps的逐步交付。</p><p>支持如下特性：</p><ul><li>蓝绿更新策略</li><li>金丝雀更新策略</li><li>更加细粒度、加权流量拆分</li><li>自动回滚</li><li>手动判断</li><li>可定制的指标查询和业务KPI分析</li><li>Ingress控制器集成：NGINX，ALB</li><li>Metrics指标集成：Prometheus、Wavefront、Kayenta、Web、Kubernetes Jobs、Datadog、New Relic、Graphite、InfluxDB</li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>与Deployment对象类似，Argo Rollout控制器将管理ReplicaSets的创建、缩放和删除，这些ReplicaSet由Rollout资源中的spec.template定义，使用与Deployment对象相同的pod模板。</p><p>当spec.template变更时，这会向Argo Rollouts控制器发出信号，表示将引入新的ReplicaSet，控制器将使用spec.strategy字段内的策略来确定从旧ReplicaSet到新ReplicaSet的rollout将如何进行，一旦这个新的ReplicaSet被放大(可以选择通过一个Analysis)，控制器会将其标记为稳定。</p><p>如果在spec.template从稳定的ReplicaSet过渡到新的ReplicaSet的过程中发生另一次变更(即在发布过程中更改了应用程序版本)，那么之前的新ReplicaSet将缩小，并且控制器将尝试反映更新spec.template字段的ReplicaSet。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Argo-Rollouts简介&quot;&gt;&lt;a href=&quot;#Argo-Rollouts简介&quot; class=&quot;headerlink&quot; title=&quot;Argo Rollouts简介&quot;&gt;&lt;/a&gt;Argo Rollouts简介&lt;/h2&gt;&lt;p&gt;Argo Rollouts是一个Kubernetes Operator实现，它为Kubernetes提供更加高级的部署能力，如蓝绿、金丝雀、金丝雀分析、实验和渐进式交付功能，为云原生应用和服务实现自动化、基于GitOps的逐步交付。&lt;/p&gt;
&lt;p&gt;支持如下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蓝绿更新策略&lt;/li&gt;
&lt;li&gt;金丝雀更新策略&lt;/li&gt;
&lt;li&gt;更加细粒度、加权流量拆分&lt;/li&gt;
&lt;li&gt;自动回滚&lt;/li&gt;
&lt;li&gt;手动判断&lt;/li&gt;
&lt;li&gt;可定制的指标查询和业务KPI分析&lt;/li&gt;
&lt;li&gt;Ingress控制器集成：NGINX，ALB&lt;/li&gt;
&lt;li&gt;Metrics指标集成：Prometheus、Wavefront、Kayenta、Web、Kubernetes Jobs、Datadog、New Relic、Graphite、InfluxDB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="https://bentech8.github.io/categories/Kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://bentech8.github.io/tags/Kubernetes/"/>
    
  </entry>
  
</feed>
